// Mocks generated by Mockito 5.4.4 from annotations
// in mon_pacing/test/mocks/blocs.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i24;

import 'package:flutter_bloc/flutter_bloc.dart' as _i26;
import 'package:haptic_feedback/haptic_feedback.dart' as _i42;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i41;
import 'package:mon_pacing/cubits/matches/matches_cubit.dart' as _i12;
import 'package:mon_pacing/cubits/matches/matches_state.dart' as _i11;
import 'package:mon_pacing/cubits/pacings/pacings_cubit.dart' as _i6;
import 'package:mon_pacing/cubits/pacings/pacings_state.dart' as _i5;
import 'package:mon_pacing/cubits/settings/settings_cubit.dart' as _i4;
import 'package:mon_pacing/cubits/settings/settings_state.dart' as _i22;
import 'package:mon_pacing/cubits/teams/teams_cubit.dart' as _i39;
import 'package:mon_pacing/cubits/teams/teams_state.dart' as _i20;
import 'package:mon_pacing/cubits/timer/timer_cubit.dart' as _i43;
import 'package:mon_pacing/cubits/timer/timer_state.dart' as _i23;
import 'package:mon_pacing/models/improvisation_model.dart' as _i28;
import 'package:mon_pacing/models/match_model.dart' as _i16;
import 'package:mon_pacing/models/match_team_model.dart' as _i34;
import 'package:mon_pacing/models/pacing_model.dart' as _i25;
import 'package:mon_pacing/models/penalty_model.dart' as _i31;
import 'package:mon_pacing/models/performer_model.dart' as _i35;
import 'package:mon_pacing/models/star_model.dart' as _i32;
import 'package:mon_pacing/models/team_model.dart' as _i36;
import 'package:mon_pacing/pages/match/cubits/match_cubit.dart' as _i30;
import 'package:mon_pacing/pages/match/cubits/match_state.dart' as _i14;
import 'package:mon_pacing/pages/match_detail/cubits/match_detail_cubit.dart'
    as _i33;
import 'package:mon_pacing/pages/match_detail/cubits/match_detail_state.dart'
    as _i15;
import 'package:mon_pacing/pages/match_improvisation/cubits/match_improvisation_cubit.dart'
    as _i37;
import 'package:mon_pacing/pages/match_improvisation/cubits/match_improvisation_state.dart'
    as _i17;
import 'package:mon_pacing/pages/match_penalty/cubits/match_penalty_cubit.dart'
    as _i38;
import 'package:mon_pacing/pages/match_penalty/cubits/match_penalty_state.dart'
    as _i18;
import 'package:mon_pacing/pages/pacing/cubits/pacing_cubit.dart' as _i27;
import 'package:mon_pacing/pages/pacing/cubits/pacing_state.dart' as _i7;
import 'package:mon_pacing/pages/pacing_detail/cubits/pacing_detail_cubit.dart'
    as _i29;
import 'package:mon_pacing/pages/pacing_detail/cubits/pacing_detail_state.dart'
    as _i8;
import 'package:mon_pacing/pages/team_detail/cubits/team_detail_cubit.dart'
    as _i40;
import 'package:mon_pacing/pages/team_detail/cubits/team_detail_state.dart'
    as _i21;
import 'package:mon_pacing/repositories/matches_repository.dart' as _i9;
import 'package:mon_pacing/repositories/pacings_repository.dart' as _i2;
import 'package:mon_pacing/repositories/teams_repository.dart' as _i19;
import 'package:mon_pacing/services/analytics_service.dart' as _i10;
import 'package:mon_pacing/services/excel_service.dart' as _i13;
import 'package:mon_pacing/services/toaster_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePacingsRepository_0 extends _i1.SmartFake
    implements _i2.PacingsRepository {
  _FakePacingsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeToasterService_1 extends _i1.SmartFake
    implements _i3.ToasterService {
  _FakeToasterService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettingsCubit_2 extends _i1.SmartFake implements _i4.SettingsCubit {
  _FakeSettingsCubit_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePacingsState_3 extends _i1.SmartFake implements _i5.PacingsState {
  _FakePacingsState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePacingsCubit_4 extends _i1.SmartFake implements _i6.PacingsCubit {
  _FakePacingsCubit_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePacingState_5 extends _i1.SmartFake implements _i7.PacingState {
  _FakePacingState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePacingDetailState_6 extends _i1.SmartFake
    implements _i8.PacingDetailState {
  _FakePacingDetailState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMatchesRepository_7 extends _i1.SmartFake
    implements _i9.MatchesRepository {
  _FakeMatchesRepository_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnalyticsService_8 extends _i1.SmartFake
    implements _i10.AnalyticsService {
  _FakeAnalyticsService_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMatchesState_9 extends _i1.SmartFake implements _i11.MatchesState {
  _FakeMatchesState_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMatchesCubit_10 extends _i1.SmartFake implements _i12.MatchesCubit {
  _FakeMatchesCubit_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExcelService_11 extends _i1.SmartFake implements _i13.ExcelService {
  _FakeExcelService_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMatchState_12 extends _i1.SmartFake implements _i14.MatchState {
  _FakeMatchState_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMatchDetailState_13 extends _i1.SmartFake
    implements _i15.MatchDetailState {
  _FakeMatchDetailState_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMatchModel_14 extends _i1.SmartFake implements _i16.MatchModel {
  _FakeMatchModel_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMatchImprovisationState_15 extends _i1.SmartFake
    implements _i17.MatchImprovisationState {
  _FakeMatchImprovisationState_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMatchPenaltyState_16 extends _i1.SmartFake
    implements _i18.MatchPenaltyState {
  _FakeMatchPenaltyState_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTeamsRepository_17 extends _i1.SmartFake
    implements _i19.TeamsRepository {
  _FakeTeamsRepository_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTeamsState_18 extends _i1.SmartFake implements _i20.TeamsState {
  _FakeTeamsState_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTeamDetailState_19 extends _i1.SmartFake
    implements _i21.TeamDetailState {
  _FakeTeamDetailState_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettingsState_20 extends _i1.SmartFake
    implements _i22.SettingsState {
  _FakeSettingsState_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTimerState_21 extends _i1.SmartFake implements _i23.TimerState {
  _FakeTimerState_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PacingsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPacingsCubit extends _i1.Mock implements _i6.PacingsCubit {
  @override
  _i2.PacingsRepository get pacingsRepository => (super.noSuchMethod(
        Invocation.getter(#pacingsRepository),
        returnValue: _FakePacingsRepository_0(
          this,
          Invocation.getter(#pacingsRepository),
        ),
        returnValueForMissingStub: _FakePacingsRepository_0(
          this,
          Invocation.getter(#pacingsRepository),
        ),
      ) as _i2.PacingsRepository);

  @override
  _i3.ToasterService get toasterService => (super.noSuchMethod(
        Invocation.getter(#toasterService),
        returnValue: _FakeToasterService_1(
          this,
          Invocation.getter(#toasterService),
        ),
        returnValueForMissingStub: _FakeToasterService_1(
          this,
          Invocation.getter(#toasterService),
        ),
      ) as _i3.ToasterService);

  @override
  _i4.SettingsCubit get settingsCubit => (super.noSuchMethod(
        Invocation.getter(#settingsCubit),
        returnValue: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
        returnValueForMissingStub: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
      ) as _i4.SettingsCubit);

  @override
  _i5.PacingsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePacingsState_3(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakePacingsState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.PacingsState);

  @override
  _i24.Stream<_i5.PacingsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i24.Stream<_i5.PacingsState>.empty(),
        returnValueForMissingStub: _i24.Stream<_i5.PacingsState>.empty(),
      ) as _i24.Stream<_i5.PacingsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i24.Future<_i25.PacingModel?> add(_i25.PacingModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [model],
        ),
        returnValue: _i24.Future<_i25.PacingModel?>.value(),
        returnValueForMissingStub: _i24.Future<_i25.PacingModel?>.value(),
      ) as _i24.Future<_i25.PacingModel?>);

  @override
  _i24.Future<void> edit(_i25.PacingModel? model) => (super.noSuchMethod(
        Invocation.method(
          #edit,
          [model],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> delete(_i25.PacingModel? model) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [model],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<List<String>> getAllTags({String? query = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTags,
          [],
          {#query: query},
        ),
        returnValue: _i24.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i24.Future<List<String>>.value(<String>[]),
      ) as _i24.Future<List<String>>);

  @override
  _i24.Future<List<String>> getAllCategories({String? query = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCategories,
          [],
          {#query: query},
        ),
        returnValue: _i24.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i24.Future<List<String>>.value(<String>[]),
      ) as _i24.Future<List<String>>);

  @override
  _i24.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<_i25.PacingModel?> import() => (super.noSuchMethod(
        Invocation.method(
          #import,
          [],
        ),
        returnValue: _i24.Future<_i25.PacingModel?>.value(),
        returnValueForMissingStub: _i24.Future<_i25.PacingModel?>.value(),
      ) as _i24.Future<_i25.PacingModel?>);

  @override
  _i24.Future<bool> export(_i25.PacingModel? model) => (super.noSuchMethod(
        Invocation.method(
          #export,
          [model],
        ),
        returnValue: _i24.Future<bool>.value(false),
        returnValueForMissingStub: _i24.Future<bool>.value(false),
      ) as _i24.Future<bool>);

  @override
  void emit(_i5.PacingsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i26.Change<_i5.PacingsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);
}

/// A class which mocks [PacingCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPacingCubit extends _i1.Mock implements _i27.PacingCubit {
  @override
  _i2.PacingsRepository get pacingsRepository => (super.noSuchMethod(
        Invocation.getter(#pacingsRepository),
        returnValue: _FakePacingsRepository_0(
          this,
          Invocation.getter(#pacingsRepository),
        ),
        returnValueForMissingStub: _FakePacingsRepository_0(
          this,
          Invocation.getter(#pacingsRepository),
        ),
      ) as _i2.PacingsRepository);

  @override
  _i6.PacingsCubit get pacingsCubit => (super.noSuchMethod(
        Invocation.getter(#pacingsCubit),
        returnValue: _FakePacingsCubit_4(
          this,
          Invocation.getter(#pacingsCubit),
        ),
        returnValueForMissingStub: _FakePacingsCubit_4(
          this,
          Invocation.getter(#pacingsCubit),
        ),
      ) as _i6.PacingsCubit);

  @override
  _i4.SettingsCubit get settingsCubit => (super.noSuchMethod(
        Invocation.getter(#settingsCubit),
        returnValue: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
        returnValueForMissingStub: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
      ) as _i4.SettingsCubit);

  @override
  _i7.PacingState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePacingState_5(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakePacingState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.PacingState);

  @override
  _i24.Stream<_i7.PacingState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i24.Stream<_i7.PacingState>.empty(),
        returnValueForMissingStub: _i24.Stream<_i7.PacingState>.empty(),
      ) as _i24.Stream<_i7.PacingState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i24.Future<void> initialize(int? id) => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [id],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> edit(_i25.PacingModel? model) => (super.noSuchMethod(
        Invocation.method(
          #edit,
          [model],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> addImprovisation() => (super.noSuchMethod(
        Invocation.method(
          #addImprovisation,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> moveImprovisation(
    int? oldIndex,
    int? newIndex,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #moveImprovisation,
          [
            oldIndex,
            newIndex,
          ],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> removeImprovisation(int? index) => (super.noSuchMethod(
        Invocation.method(
          #removeImprovisation,
          [index],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> editImprovisation(
    int? index,
    _i28.ImprovisationModel? model,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editImprovisation,
          [
            index,
            model,
          ],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  void emit(_i7.PacingState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i26.Change<_i7.PacingState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);
}

/// A class which mocks [PacingDetailCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPacingDetailCubit extends _i1.Mock implements _i29.PacingDetailCubit {
  @override
  _i4.SettingsCubit get settingsCubit => (super.noSuchMethod(
        Invocation.getter(#settingsCubit),
        returnValue: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
        returnValueForMissingStub: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
      ) as _i4.SettingsCubit);

  @override
  bool get editMode => (super.noSuchMethod(
        Invocation.getter(#editMode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i24.FutureOr<bool> Function(_i25.PacingModel) get onConfirm =>
      (super.noSuchMethod(
        Invocation.getter(#onConfirm),
        returnValue: (_i25.PacingModel value) => _i24.Future<bool>.value(false),
        returnValueForMissingStub: (_i25.PacingModel value) =>
            _i24.Future<bool>.value(false),
      ) as _i24.FutureOr<bool> Function(_i25.PacingModel));

  @override
  _i8.PacingDetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePacingDetailState_6(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakePacingDetailState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.PacingDetailState);

  @override
  _i24.Stream<_i8.PacingDetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i24.Stream<_i8.PacingDetailState>.empty(),
        returnValueForMissingStub: _i24.Stream<_i8.PacingDetailState>.empty(),
      ) as _i24.Stream<_i8.PacingDetailState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void edit(_i25.PacingModel? pacing) => super.noSuchMethod(
        Invocation.method(
          #edit,
          [pacing],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i8.PacingDetailState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i26.Change<_i8.PacingDetailState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);
}

/// A class which mocks [MatchesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchesCubit extends _i1.Mock implements _i12.MatchesCubit {
  @override
  _i9.MatchesRepository get matchesRepository => (super.noSuchMethod(
        Invocation.getter(#matchesRepository),
        returnValue: _FakeMatchesRepository_7(
          this,
          Invocation.getter(#matchesRepository),
        ),
        returnValueForMissingStub: _FakeMatchesRepository_7(
          this,
          Invocation.getter(#matchesRepository),
        ),
      ) as _i9.MatchesRepository);

  @override
  _i3.ToasterService get toasterService => (super.noSuchMethod(
        Invocation.getter(#toasterService),
        returnValue: _FakeToasterService_1(
          this,
          Invocation.getter(#toasterService),
        ),
        returnValueForMissingStub: _FakeToasterService_1(
          this,
          Invocation.getter(#toasterService),
        ),
      ) as _i3.ToasterService);

  @override
  _i4.SettingsCubit get settingsCubit => (super.noSuchMethod(
        Invocation.getter(#settingsCubit),
        returnValue: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
        returnValueForMissingStub: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
      ) as _i4.SettingsCubit);

  @override
  _i10.AnalyticsService get analyticsService => (super.noSuchMethod(
        Invocation.getter(#analyticsService),
        returnValue: _FakeAnalyticsService_8(
          this,
          Invocation.getter(#analyticsService),
        ),
        returnValueForMissingStub: _FakeAnalyticsService_8(
          this,
          Invocation.getter(#analyticsService),
        ),
      ) as _i10.AnalyticsService);

  @override
  _i11.MatchesState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMatchesState_9(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeMatchesState_9(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.MatchesState);

  @override
  _i24.Stream<_i11.MatchesState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i24.Stream<_i11.MatchesState>.empty(),
        returnValueForMissingStub: _i24.Stream<_i11.MatchesState>.empty(),
      ) as _i24.Stream<_i11.MatchesState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i24.Future<_i16.MatchModel?> add(_i16.MatchModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [model],
        ),
        returnValue: _i24.Future<_i16.MatchModel?>.value(),
        returnValueForMissingStub: _i24.Future<_i16.MatchModel?>.value(),
      ) as _i24.Future<_i16.MatchModel?>);

  @override
  _i24.Future<void> edit(_i16.MatchModel? model) => (super.noSuchMethod(
        Invocation.method(
          #edit,
          [model],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> delete(_i16.MatchModel? model) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [model],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<List<String>> getAllTags({String? query = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTags,
          [],
          {#query: query},
        ),
        returnValue: _i24.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i24.Future<List<String>>.value(<String>[]),
      ) as _i24.Future<List<String>>);

  @override
  _i24.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  void emit(_i11.MatchesState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i26.Change<_i11.MatchesState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);
}

/// A class which mocks [MatchCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchCubit extends _i1.Mock implements _i30.MatchCubit {
  @override
  _i9.MatchesRepository get matchesRepository => (super.noSuchMethod(
        Invocation.getter(#matchesRepository),
        returnValue: _FakeMatchesRepository_7(
          this,
          Invocation.getter(#matchesRepository),
        ),
        returnValueForMissingStub: _FakeMatchesRepository_7(
          this,
          Invocation.getter(#matchesRepository),
        ),
      ) as _i9.MatchesRepository);

  @override
  _i12.MatchesCubit get matchesCubit => (super.noSuchMethod(
        Invocation.getter(#matchesCubit),
        returnValue: _FakeMatchesCubit_10(
          this,
          Invocation.getter(#matchesCubit),
        ),
        returnValueForMissingStub: _FakeMatchesCubit_10(
          this,
          Invocation.getter(#matchesCubit),
        ),
      ) as _i12.MatchesCubit);

  @override
  _i4.SettingsCubit get settingsCubit => (super.noSuchMethod(
        Invocation.getter(#settingsCubit),
        returnValue: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
        returnValueForMissingStub: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
      ) as _i4.SettingsCubit);

  @override
  _i3.ToasterService get toasterService => (super.noSuchMethod(
        Invocation.getter(#toasterService),
        returnValue: _FakeToasterService_1(
          this,
          Invocation.getter(#toasterService),
        ),
        returnValueForMissingStub: _FakeToasterService_1(
          this,
          Invocation.getter(#toasterService),
        ),
      ) as _i3.ToasterService);

  @override
  _i13.ExcelService get excelService => (super.noSuchMethod(
        Invocation.getter(#excelService),
        returnValue: _FakeExcelService_11(
          this,
          Invocation.getter(#excelService),
        ),
        returnValueForMissingStub: _FakeExcelService_11(
          this,
          Invocation.getter(#excelService),
        ),
      ) as _i13.ExcelService);

  @override
  _i10.AnalyticsService get analyticsService => (super.noSuchMethod(
        Invocation.getter(#analyticsService),
        returnValue: _FakeAnalyticsService_8(
          this,
          Invocation.getter(#analyticsService),
        ),
        returnValueForMissingStub: _FakeAnalyticsService_8(
          this,
          Invocation.getter(#analyticsService),
        ),
      ) as _i10.AnalyticsService);

  @override
  _i14.MatchState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMatchState_12(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeMatchState_12(
          this,
          Invocation.getter(#state),
        ),
      ) as _i14.MatchState);

  @override
  _i24.Stream<_i14.MatchState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i24.Stream<_i14.MatchState>.empty(),
        returnValueForMissingStub: _i24.Stream<_i14.MatchState>.empty(),
      ) as _i24.Stream<_i14.MatchState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i24.Future<void> initialize(
    int? id, {
    int? improvisationId,
    int? durationIndex,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [id],
          {
            #improvisationId: improvisationId,
            #durationIndex: durationIndex,
          },
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> edit(_i16.MatchModel? match) => (super.noSuchMethod(
        Invocation.method(
          #edit,
          [match],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> addImprovisation(
    _i28.ImprovisationModel? improvisation,
    int? index,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addImprovisation,
          [
            improvisation,
            index,
          ],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> editImprovisation(
    _i28.ImprovisationModel? improvisation,
    int? index,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editImprovisation,
          [
            improvisation,
            index,
          ],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> removeImprovisation(
          _i28.ImprovisationModel? improvisation) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeImprovisation,
          [improvisation],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  void changePage(int? page) => super.noSuchMethod(
        Invocation.method(
          #changePage,
          [page],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeDuration(int? durationIndex) => super.noSuchMethod(
        Invocation.method(
          #changeDuration,
          [durationIndex],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> setPoint(
    int? improvisationId,
    int? teamId,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPoint,
          [
            improvisationId,
            teamId,
            value,
          ],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> addPenalty(_i31.PenaltyModel? penalty) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPenalty,
          [penalty],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> editPenalty(_i31.PenaltyModel? penalty) =>
      (super.noSuchMethod(
        Invocation.method(
          #editPenalty,
          [penalty],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> removePenalty(int? penaltyId) => (super.noSuchMethod(
        Invocation.method(
          #removePenalty,
          [penaltyId],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> addStar() => (super.noSuchMethod(
        Invocation.method(
          #addStar,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> editStar(_i32.StarModel? star) => (super.noSuchMethod(
        Invocation.method(
          #editStar,
          [star],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> removeStar(int? starId) => (super.noSuchMethod(
        Invocation.method(
          #removeStar,
          [starId],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> moveStar(
    int? oldIndex,
    int? newIndex,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #moveStar,
          [
            oldIndex,
            newIndex,
          ],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<bool> exportExcel(_i16.MatchModel? match) => (super.noSuchMethod(
        Invocation.method(
          #exportExcel,
          [match],
        ),
        returnValue: _i24.Future<bool>.value(false),
        returnValueForMissingStub: _i24.Future<bool>.value(false),
      ) as _i24.Future<bool>);

  @override
  void emit(_i14.MatchState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i26.Change<_i14.MatchState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);
}

/// A class which mocks [MatchDetailCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchDetailCubit extends _i1.Mock implements _i33.MatchDetailCubit {
  @override
  _i4.SettingsCubit get settingsCubit => (super.noSuchMethod(
        Invocation.getter(#settingsCubit),
        returnValue: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
        returnValueForMissingStub: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
      ) as _i4.SettingsCubit);

  @override
  _i24.FutureOr<bool> Function(_i16.MatchModel) get onConfirm =>
      (super.noSuchMethod(
        Invocation.getter(#onConfirm),
        returnValue: (_i16.MatchModel value) => _i24.Future<bool>.value(false),
        returnValueForMissingStub: (_i16.MatchModel value) =>
            _i24.Future<bool>.value(false),
      ) as _i24.FutureOr<bool> Function(_i16.MatchModel));

  @override
  _i15.MatchDetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMatchDetailState_13(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeMatchDetailState_13(
          this,
          Invocation.getter(#state),
        ),
      ) as _i15.MatchDetailState);

  @override
  _i24.Stream<_i15.MatchDetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i24.Stream<_i15.MatchDetailState>.empty(),
        returnValueForMissingStub: _i24.Stream<_i15.MatchDetailState>.empty(),
      ) as _i24.Stream<_i15.MatchDetailState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i24.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  void edit(_i16.MatchModel? match) => super.noSuchMethod(
        Invocation.method(
          #edit,
          [match],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addTeam() => super.noSuchMethod(
        Invocation.method(
          #addTeam,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void editTeam(
    int? index,
    _i34.MatchTeamModel? team,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #editTeam,
          [
            index,
            team,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeTeam(int? index) => super.noSuchMethod(
        Invocation.method(
          #removeTeam,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addPerformer(int? teamId) => super.noSuchMethod(
        Invocation.method(
          #addPerformer,
          [teamId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void editPerformer(
    int? teamId,
    int? index,
    _i35.PerformerModel? performer,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #editPerformer,
          [
            teamId,
            index,
            performer,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removePerformer(
    int? teamId,
    int? index,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removePerformer,
          [
            teamId,
            index,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void movePerformer(
    int? teamId,
    int? oldIndex,
    int? newIndex,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #movePerformer,
          [
            teamId,
            oldIndex,
            newIndex,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTeamSelected(
    int? teamId,
    _i36.TeamModel? team,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onTeamSelected,
          [
            teamId,
            team,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i15.MatchDetailState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i26.Change<_i15.MatchDetailState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);
}

/// A class which mocks [MatchImprovisationCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchImprovisationCubit extends _i1.Mock
    implements _i37.MatchImprovisationCubit {
  @override
  _i16.MatchModel get match => (super.noSuchMethod(
        Invocation.getter(#match),
        returnValue: _FakeMatchModel_14(
          this,
          Invocation.getter(#match),
        ),
        returnValueForMissingStub: _FakeMatchModel_14(
          this,
          Invocation.getter(#match),
        ),
      ) as _i16.MatchModel);

  @override
  _i4.SettingsCubit get settingsCubit => (super.noSuchMethod(
        Invocation.getter(#settingsCubit),
        returnValue: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
        returnValueForMissingStub: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
      ) as _i4.SettingsCubit);

  @override
  _i24.FutureOr<void> Function(
    _i28.ImprovisationModel,
    int,
  ) get onConfirm => (super.noSuchMethod(
        Invocation.getter(#onConfirm),
        returnValue: (
          _i28.ImprovisationModel improvisation,
          int index,
        ) =>
            null,
        returnValueForMissingStub: (
          _i28.ImprovisationModel improvisation,
          int index,
        ) =>
            null,
      ) as _i24.FutureOr<void> Function(
        _i28.ImprovisationModel,
        int,
      ));

  @override
  _i17.MatchImprovisationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMatchImprovisationState_15(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeMatchImprovisationState_15(
          this,
          Invocation.getter(#state),
        ),
      ) as _i17.MatchImprovisationState);

  @override
  _i24.Stream<_i17.MatchImprovisationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i24.Stream<_i17.MatchImprovisationState>.empty(),
        returnValueForMissingStub:
            _i24.Stream<_i17.MatchImprovisationState>.empty(),
      ) as _i24.Stream<_i17.MatchImprovisationState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void edit(_i28.ImprovisationModel? improvisation) => super.noSuchMethod(
        Invocation.method(
          #edit,
          [improvisation],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void changeIndex(int? index) => super.noSuchMethod(
        Invocation.method(
          #changeIndex,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i17.MatchImprovisationState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i26.Change<_i17.MatchImprovisationState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);
}

/// A class which mocks [MatchPenaltyCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchPenaltyCubit extends _i1.Mock implements _i38.MatchPenaltyCubit {
  @override
  int get improvisationId => (super.noSuchMethod(
        Invocation.getter(#improvisationId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  List<_i34.MatchTeamModel> get teams => (super.noSuchMethod(
        Invocation.getter(#teams),
        returnValue: <_i34.MatchTeamModel>[],
        returnValueForMissingStub: <_i34.MatchTeamModel>[],
      ) as List<_i34.MatchTeamModel>);

  @override
  _i24.FutureOr<void> Function(_i31.PenaltyModel) get onSave =>
      (super.noSuchMethod(
        Invocation.getter(#onSave),
        returnValue: (_i31.PenaltyModel penalty) => null,
        returnValueForMissingStub: (_i31.PenaltyModel penalty) => null,
      ) as _i24.FutureOr<void> Function(_i31.PenaltyModel));

  @override
  _i18.MatchPenaltyState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMatchPenaltyState_16(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeMatchPenaltyState_16(
          this,
          Invocation.getter(#state),
        ),
      ) as _i18.MatchPenaltyState);

  @override
  _i24.Stream<_i18.MatchPenaltyState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i24.Stream<_i18.MatchPenaltyState>.empty(),
        returnValueForMissingStub: _i24.Stream<_i18.MatchPenaltyState>.empty(),
      ) as _i24.Stream<_i18.MatchPenaltyState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void edit(_i31.PenaltyModel? penalty) => super.noSuchMethod(
        Invocation.method(
          #edit,
          [penalty],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i18.MatchPenaltyState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i26.Change<_i18.MatchPenaltyState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);
}

/// A class which mocks [TeamsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTeamsCubit extends _i1.Mock implements _i39.TeamsCubit {
  @override
  _i19.TeamsRepository get teamsRepository => (super.noSuchMethod(
        Invocation.getter(#teamsRepository),
        returnValue: _FakeTeamsRepository_17(
          this,
          Invocation.getter(#teamsRepository),
        ),
        returnValueForMissingStub: _FakeTeamsRepository_17(
          this,
          Invocation.getter(#teamsRepository),
        ),
      ) as _i19.TeamsRepository);

  @override
  _i3.ToasterService get toasterService => (super.noSuchMethod(
        Invocation.getter(#toasterService),
        returnValue: _FakeToasterService_1(
          this,
          Invocation.getter(#toasterService),
        ),
        returnValueForMissingStub: _FakeToasterService_1(
          this,
          Invocation.getter(#toasterService),
        ),
      ) as _i3.ToasterService);

  @override
  _i4.SettingsCubit get settingsCubit => (super.noSuchMethod(
        Invocation.getter(#settingsCubit),
        returnValue: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
        returnValueForMissingStub: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
      ) as _i4.SettingsCubit);

  @override
  _i20.TeamsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTeamsState_18(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeTeamsState_18(
          this,
          Invocation.getter(#state),
        ),
      ) as _i20.TeamsState);

  @override
  _i24.Stream<_i20.TeamsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i24.Stream<_i20.TeamsState>.empty(),
        returnValueForMissingStub: _i24.Stream<_i20.TeamsState>.empty(),
      ) as _i24.Stream<_i20.TeamsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i24.Future<_i36.TeamModel?> add(_i36.TeamModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [model],
        ),
        returnValue: _i24.Future<_i36.TeamModel?>.value(),
        returnValueForMissingStub: _i24.Future<_i36.TeamModel?>.value(),
      ) as _i24.Future<_i36.TeamModel?>);

  @override
  _i24.Future<void> edit(_i36.TeamModel? model) => (super.noSuchMethod(
        Invocation.method(
          #edit,
          [model],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> delete(_i36.TeamModel? model) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [model],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<void> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<List<String>> getAllTags({String? query = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTags,
          [],
          {#query: query},
        ),
        returnValue: _i24.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i24.Future<List<String>>.value(<String>[]),
      ) as _i24.Future<List<String>>);

  @override
  _i24.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<_i36.TeamModel?> import() => (super.noSuchMethod(
        Invocation.method(
          #import,
          [],
        ),
        returnValue: _i24.Future<_i36.TeamModel?>.value(),
        returnValueForMissingStub: _i24.Future<_i36.TeamModel?>.value(),
      ) as _i24.Future<_i36.TeamModel?>);

  @override
  _i24.Future<bool> export(_i36.TeamModel? model) => (super.noSuchMethod(
        Invocation.method(
          #export,
          [model],
        ),
        returnValue: _i24.Future<bool>.value(false),
        returnValueForMissingStub: _i24.Future<bool>.value(false),
      ) as _i24.Future<bool>);

  @override
  void emit(_i20.TeamsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i26.Change<_i20.TeamsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);
}

/// A class which mocks [TeamDetailCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTeamDetailCubit extends _i1.Mock implements _i40.TeamDetailCubit {
  @override
  _i4.SettingsCubit get settingsCubit => (super.noSuchMethod(
        Invocation.getter(#settingsCubit),
        returnValue: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
        returnValueForMissingStub: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
      ) as _i4.SettingsCubit);

  @override
  bool get editMode => (super.noSuchMethod(
        Invocation.getter(#editMode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i24.FutureOr<void> Function(_i36.TeamModel) get onConfirm =>
      (super.noSuchMethod(
        Invocation.getter(#onConfirm),
        returnValue: (_i36.TeamModel value) => null,
        returnValueForMissingStub: (_i36.TeamModel value) => null,
      ) as _i24.FutureOr<void> Function(_i36.TeamModel));

  @override
  _i21.TeamDetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTeamDetailState_19(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeTeamDetailState_19(
          this,
          Invocation.getter(#state),
        ),
      ) as _i21.TeamDetailState);

  @override
  _i24.Stream<_i21.TeamDetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i24.Stream<_i21.TeamDetailState>.empty(),
        returnValueForMissingStub: _i24.Stream<_i21.TeamDetailState>.empty(),
      ) as _i24.Stream<_i21.TeamDetailState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i24.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  void edit(_i36.TeamModel? team) => super.noSuchMethod(
        Invocation.method(
          #edit,
          [team],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addPerformer() => super.noSuchMethod(
        Invocation.method(
          #addPerformer,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void editPerformer(
    int? index,
    _i35.PerformerModel? performer,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #editPerformer,
          [
            index,
            performer,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removePerformer(int? index) => super.noSuchMethod(
        Invocation.method(
          #removePerformer,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void movePerformer(
    int? oldIndex,
    int? newIndex,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #movePerformer,
          [
            oldIndex,
            newIndex,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i21.TeamDetailState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i26.Change<_i21.TeamDetailState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);
}

/// A class which mocks [SettingsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsCubit extends _i1.Mock implements _i4.SettingsCubit {
  @override
  _i22.SettingsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSettingsState_20(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeSettingsState_20(
          this,
          Invocation.getter(#state),
        ),
      ) as _i22.SettingsState);

  @override
  _i24.Stream<_i22.SettingsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i24.Stream<_i22.SettingsState>.empty(),
        returnValueForMissingStub: _i24.Stream<_i22.SettingsState>.empty(),
      ) as _i24.Stream<_i22.SettingsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i41.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i41.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get storagePrefix => (super.noSuchMethod(
        Invocation.getter(#storagePrefix),
        returnValue: _i41.dummyValue<String>(
          this,
          Invocation.getter(#storagePrefix),
        ),
        returnValueForMissingStub: _i41.dummyValue<String>(
          this,
          Invocation.getter(#storagePrefix),
        ),
      ) as String);

  @override
  String get storageToken => (super.noSuchMethod(
        Invocation.getter(#storageToken),
        returnValue: _i41.dummyValue<String>(
          this,
          Invocation.getter(#storageToken),
        ),
        returnValueForMissingStub: _i41.dummyValue<String>(
          this,
          Invocation.getter(#storageToken),
        ),
      ) as String);

  @override
  void edit(_i22.SettingsState? model) => super.noSuchMethod(
        Invocation.method(
          #edit,
          [model],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> vibrate(_i42.HapticsType? type) => (super.noSuchMethod(
        Invocation.method(
          #vibrate,
          [type],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i22.SettingsState? fromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #fromJson,
          [json],
        ),
        returnValueForMissingStub: null,
      ) as _i22.SettingsState?);

  @override
  Map<String, dynamic>? toJson(_i22.SettingsState? state) =>
      (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [state],
        ),
        returnValueForMissingStub: null,
      ) as Map<String, dynamic>?);

  @override
  void emit(_i22.SettingsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i26.Change<_i22.SettingsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  void hydrate() => super.noSuchMethod(
        Invocation.method(
          #hydrate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i24.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);
}

/// A class which mocks [TimerCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerCubit extends _i1.Mock implements _i43.TimerCubit {
  @override
  _i4.SettingsCubit get settingsCubit => (super.noSuchMethod(
        Invocation.getter(#settingsCubit),
        returnValue: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
        returnValueForMissingStub: _FakeSettingsCubit_2(
          this,
          Invocation.getter(#settingsCubit),
        ),
      ) as _i4.SettingsCubit);

  @override
  _i3.ToasterService get toasterService => (super.noSuchMethod(
        Invocation.getter(#toasterService),
        returnValue: _FakeToasterService_1(
          this,
          Invocation.getter(#toasterService),
        ),
        returnValueForMissingStub: _FakeToasterService_1(
          this,
          Invocation.getter(#toasterService),
        ),
      ) as _i3.ToasterService);

  @override
  _i23.TimerState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTimerState_21(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeTimerState_21(
          this,
          Invocation.getter(#state),
        ),
      ) as _i23.TimerState);

  @override
  _i24.Stream<_i23.TimerState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i24.Stream<_i23.TimerState>.empty(),
        returnValueForMissingStub: _i24.Stream<_i23.TimerState>.empty(),
      ) as _i24.Stream<_i23.TimerState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i24.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  _i24.Future<bool> start(
    int? matchId,
    String? matchName,
    int? improvisationId,
    int? durationIndex,
    Duration? duration,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [
            matchId,
            matchName,
            improvisationId,
            durationIndex,
            duration,
          ],
        ),
        returnValue: _i24.Future<bool>.value(false),
        returnValueForMissingStub: _i24.Future<bool>.value(false),
      ) as _i24.Future<bool>);

  @override
  _i24.Future<bool> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i24.Future<bool>.value(false),
        returnValueForMissingStub: _i24.Future<bool>.value(false),
      ) as _i24.Future<bool>);

  @override
  _i24.Future<bool> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i24.Future<bool>.value(false),
        returnValueForMissingStub: _i24.Future<bool>.value(false),
      ) as _i24.Future<bool>);

  @override
  _i24.Future<bool> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i24.Future<bool>.value(false),
        returnValueForMissingStub: _i24.Future<bool>.value(false),
      ) as _i24.Future<bool>);

  @override
  _i24.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i24.Future<void>.value(),
        returnValueForMissingStub: _i24.Future<void>.value(),
      ) as _i24.Future<void>);

  @override
  void emit(_i23.TimerState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i26.Change<_i23.TimerState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
