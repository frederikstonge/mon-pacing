// Mocks generated by Mockito 5.4.4 from annotations
// in mon_pacing/test/mocks/repositories.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:firebase_analytics/firebase_analytics.dart' as _i3;
import 'package:isar/isar.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mon_pacing/models/match_model.dart' as _i6;
import 'package:mon_pacing/models/pacing_model.dart' as _i5;
import 'package:mon_pacing/models/team_model.dart' as _i7;
import 'package:mon_pacing/repositories/database_repository.dart' as _i4;
import 'package:mon_pacing/repositories/matches_repository.dart' as _i14;
import 'package:mon_pacing/repositories/pacings_repository.dart' as _i13;
import 'package:mon_pacing/repositories/teams_repository.dart' as _i15;
import 'package:mon_pacing/services/analytics_service.dart' as _i9;
import 'package:mon_pacing/services/excel_service.dart' as _i12;
import 'package:mon_pacing/services/toaster_service.dart' as _i10;
import 'package:toastification/toastification.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIsar_0 extends _i1.SmartFake implements _i2.Isar {
  _FakeIsar_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAnalytics_1 extends _i1.SmartFake
    implements _i3.FirebaseAnalytics {
  _FakeFirebaseAnalytics_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseRepository_2 extends _i1.SmartFake
    implements _i4.DatabaseRepository {
  _FakeDatabaseRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePacingModel_3 extends _i1.SmartFake implements _i5.PacingModel {
  _FakePacingModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMatchModel_4 extends _i1.SmartFake implements _i6.MatchModel {
  _FakeMatchModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTeamModel_5 extends _i1.SmartFake implements _i7.TeamModel {
  _FakeTeamModel_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseRepository extends _i1.Mock
    implements _i4.DatabaseRepository {
  @override
  _i8.Future<_i2.Isar> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i8.Future<_i2.Isar>.value(_FakeIsar_0(
          this,
          Invocation.getter(#database),
        )),
        returnValueForMissingStub: _i8.Future<_i2.Isar>.value(_FakeIsar_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i8.Future<_i2.Isar>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i9.AnalyticsService {
  @override
  _i3.FirebaseAnalytics get analytics => (super.noSuchMethod(
        Invocation.getter(#analytics),
        returnValue: _FakeFirebaseAnalytics_1(
          this,
          Invocation.getter(#analytics),
        ),
        returnValueForMissingStub: _FakeFirebaseAnalytics_1(
          this,
          Invocation.getter(#analytics),
        ),
      ) as _i3.FirebaseAnalytics);

  @override
  _i8.Future<void> logExportToExcel() => (super.noSuchMethod(
        Invocation.method(
          #logExportToExcel,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logStartMatch(_i6.MatchModel? match) => (super.noSuchMethod(
        Invocation.method(
          #logStartMatch,
          [match],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [ToasterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockToasterService extends _i1.Mock implements _i10.ToasterService {
  @override
  void show({
    required String? title,
    String? description,
    _i11.ToastificationType? type = _i11.ToastificationType.success,
    bool? autoClose = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #show,
          [],
          {
            #title: title,
            #description: description,
            #type: type,
            #autoClose: autoClose,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ExcelService].
///
/// See the documentation for Mockito's code generation for more information.
class MockExcelService extends _i1.Mock implements _i12.ExcelService {
  @override
  List<int>? exportMatchToExcel(
    _i6.MatchModel? match,
    dynamic localizer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportMatchToExcel,
          [
            match,
            localizer,
          ],
        ),
        returnValueForMissingStub: null,
      ) as List<int>?);
}

/// A class which mocks [PacingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPacingsRepository extends _i1.Mock implements _i13.PacingsRepository {
  @override
  _i4.DatabaseRepository get databaseRepository => (super.noSuchMethod(
        Invocation.getter(#databaseRepository),
        returnValue: _FakeDatabaseRepository_2(
          this,
          Invocation.getter(#databaseRepository),
        ),
        returnValueForMissingStub: _FakeDatabaseRepository_2(
          this,
          Invocation.getter(#databaseRepository),
        ),
      ) as _i4.DatabaseRepository);

  @override
  _i8.Future<_i5.PacingModel> add(_i5.PacingModel? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [entity],
        ),
        returnValue: _i8.Future<_i5.PacingModel>.value(_FakePacingModel_3(
          this,
          Invocation.method(
            #add,
            [entity],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.PacingModel>.value(_FakePacingModel_3(
          this,
          Invocation.method(
            #add,
            [entity],
          ),
        )),
      ) as _i8.Future<_i5.PacingModel>);

  @override
  _i8.Future<void> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> edit(_i5.PacingModel? entity) => (super.noSuchMethod(
        Invocation.method(
          #edit,
          [entity],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i5.PacingModel?> get(int? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i8.Future<_i5.PacingModel?>.value(),
        returnValueForMissingStub: _i8.Future<_i5.PacingModel?>.value(),
      ) as _i8.Future<_i5.PacingModel?>);

  @override
  _i8.Future<List<_i5.PacingModel>> getList(
    int? skip,
    int? take,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getList,
          [
            skip,
            take,
          ],
        ),
        returnValue:
            _i8.Future<List<_i5.PacingModel>>.value(<_i5.PacingModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i5.PacingModel>>.value(<_i5.PacingModel>[]),
      ) as _i8.Future<List<_i5.PacingModel>>);

  @override
  _i8.Future<List<_i5.PacingModel>> search(
    String? search,
    List<String>? selectedTags,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [
            search,
            selectedTags,
          ],
        ),
        returnValue:
            _i8.Future<List<_i5.PacingModel>>.value(<_i5.PacingModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i5.PacingModel>>.value(<_i5.PacingModel>[]),
      ) as _i8.Future<List<_i5.PacingModel>>);

  @override
  _i8.Future<List<String>> getAllTags({String? query = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTags,
          [],
          {#query: query},
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);

  @override
  _i8.Future<List<String>> getAllCategories({String? query = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCategories,
          [],
          {#query: query},
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);
}

/// A class which mocks [MatchesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchesRepository extends _i1.Mock implements _i14.MatchesRepository {
  @override
  _i4.DatabaseRepository get databaseRepository => (super.noSuchMethod(
        Invocation.getter(#databaseRepository),
        returnValue: _FakeDatabaseRepository_2(
          this,
          Invocation.getter(#databaseRepository),
        ),
        returnValueForMissingStub: _FakeDatabaseRepository_2(
          this,
          Invocation.getter(#databaseRepository),
        ),
      ) as _i4.DatabaseRepository);

  @override
  _i8.Future<_i6.MatchModel> add(_i6.MatchModel? entity) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [entity],
        ),
        returnValue: _i8.Future<_i6.MatchModel>.value(_FakeMatchModel_4(
          this,
          Invocation.method(
            #add,
            [entity],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.MatchModel>.value(_FakeMatchModel_4(
          this,
          Invocation.method(
            #add,
            [entity],
          ),
        )),
      ) as _i8.Future<_i6.MatchModel>);

  @override
  _i8.Future<void> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> edit(_i6.MatchModel? entity) => (super.noSuchMethod(
        Invocation.method(
          #edit,
          [entity],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i6.MatchModel?> get(int? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i8.Future<_i6.MatchModel?>.value(),
        returnValueForMissingStub: _i8.Future<_i6.MatchModel?>.value(),
      ) as _i8.Future<_i6.MatchModel?>);

  @override
  _i8.Future<List<_i6.MatchModel>> getList(
    int? skip,
    int? take,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getList,
          [
            skip,
            take,
          ],
        ),
        returnValue: _i8.Future<List<_i6.MatchModel>>.value(<_i6.MatchModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i6.MatchModel>>.value(<_i6.MatchModel>[]),
      ) as _i8.Future<List<_i6.MatchModel>>);

  @override
  _i8.Future<List<_i6.MatchModel>> search(
    String? search,
    List<String>? selectedTags,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [
            search,
            selectedTags,
          ],
        ),
        returnValue: _i8.Future<List<_i6.MatchModel>>.value(<_i6.MatchModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i6.MatchModel>>.value(<_i6.MatchModel>[]),
      ) as _i8.Future<List<_i6.MatchModel>>);

  @override
  _i8.Future<List<String>> getAllTags({String? query = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTags,
          [],
          {#query: query},
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);
}

/// A class which mocks [TeamsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTeamsRepository extends _i1.Mock implements _i15.TeamsRepository {
  @override
  _i4.DatabaseRepository get databaseRepository => (super.noSuchMethod(
        Invocation.getter(#databaseRepository),
        returnValue: _FakeDatabaseRepository_2(
          this,
          Invocation.getter(#databaseRepository),
        ),
        returnValueForMissingStub: _FakeDatabaseRepository_2(
          this,
          Invocation.getter(#databaseRepository),
        ),
      ) as _i4.DatabaseRepository);

  @override
  _i8.Future<_i7.TeamModel> add(_i7.TeamModel? entity) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [entity],
        ),
        returnValue: _i8.Future<_i7.TeamModel>.value(_FakeTeamModel_5(
          this,
          Invocation.method(
            #add,
            [entity],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.TeamModel>.value(_FakeTeamModel_5(
          this,
          Invocation.method(
            #add,
            [entity],
          ),
        )),
      ) as _i8.Future<_i7.TeamModel>);

  @override
  _i8.Future<void> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> edit(_i7.TeamModel? entity) => (super.noSuchMethod(
        Invocation.method(
          #edit,
          [entity],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i7.TeamModel?> get(int? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i8.Future<_i7.TeamModel?>.value(),
        returnValueForMissingStub: _i8.Future<_i7.TeamModel?>.value(),
      ) as _i8.Future<_i7.TeamModel?>);

  @override
  _i8.Future<List<_i7.TeamModel>> getList(
    int? skip,
    int? take,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getList,
          [
            skip,
            take,
          ],
        ),
        returnValue: _i8.Future<List<_i7.TeamModel>>.value(<_i7.TeamModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i7.TeamModel>>.value(<_i7.TeamModel>[]),
      ) as _i8.Future<List<_i7.TeamModel>>);

  @override
  _i8.Future<List<_i7.TeamModel>> search(
    String? search,
    List<String>? selectedTags,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [
            search,
            selectedTags,
          ],
        ),
        returnValue: _i8.Future<List<_i7.TeamModel>>.value(<_i7.TeamModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i7.TeamModel>>.value(<_i7.TeamModel>[]),
      ) as _i8.Future<List<_i7.TeamModel>>);

  @override
  _i8.Future<List<String>> getAllTags({String? query = r''}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTags,
          [],
          {#query: query},
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);
}
