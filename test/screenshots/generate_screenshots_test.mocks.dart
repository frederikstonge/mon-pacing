// Mocks generated by Mockito 5.4.6 from annotations
// in mon_pacing/test/screenshots/generate_screenshots_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i32;

import 'package:firebase_analytics/firebase_analytics.dart' as _i3;
import 'package:firebase_remote_config/firebase_remote_config.dart' as _i7;
import 'package:haptic_feedback/haptic_feedback.dart' as _i35;
import 'package:hydrated_bloc/hydrated_bloc.dart' as _i36;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i33;
import 'package:mon_pacing/cubits/feature_flags/feature_flags_cubit.dart'
    as _i39;
import 'package:mon_pacing/cubits/feature_flags/feature_flags_state.dart'
    as _i9;
import 'package:mon_pacing/cubits/integrations/integrations_cubit.dart' as _i23;
import 'package:mon_pacing/cubits/integrations/integrations_state.dart' as _i8;
import 'package:mon_pacing/cubits/matches/matches_cubit.dart' as _i27;
import 'package:mon_pacing/cubits/matches/matches_state.dart' as _i16;
import 'package:mon_pacing/cubits/onboarding/onboarding_cubit.dart' as _i38;
import 'package:mon_pacing/cubits/onboarding/onboarding_state.dart' as _i6;
import 'package:mon_pacing/cubits/pacings/pacings_cubit.dart' as _i25;
import 'package:mon_pacing/cubits/pacings/pacings_state.dart' as _i12;
import 'package:mon_pacing/cubits/settings/settings_cubit.dart' as _i21;
import 'package:mon_pacing/cubits/settings/settings_state.dart' as _i4;
import 'package:mon_pacing/cubits/teams/teams_cubit.dart' as _i40;
import 'package:mon_pacing/cubits/teams/teams_state.dart' as _i19;
import 'package:mon_pacing/cubits/timer/timer_cubit.dart' as _i41;
import 'package:mon_pacing/cubits/timer/timer_state.dart' as _i24;
import 'package:mon_pacing/cubits/tutorials/tutorials_cubit.dart' as _i37;
import 'package:mon_pacing/cubits/tutorials/tutorials_state.dart' as _i5;
import 'package:mon_pacing/integrations/integration_base.dart' as _i34;
import 'package:mon_pacing/l10n/generated/app_localizations.dart' as _i30;
import 'package:mon_pacing/models/improvisation_model.dart' as _i43;
import 'package:mon_pacing/models/match_model.dart' as _i17;
import 'package:mon_pacing/models/pacing_model.dart' as _i13;
import 'package:mon_pacing/models/penalty_model.dart' as _i45;
import 'package:mon_pacing/models/star_model.dart' as _i46;
import 'package:mon_pacing/models/team_model.dart' as _i20;
import 'package:mon_pacing/pages/match/cubits/match_cubit.dart' as _i44;
import 'package:mon_pacing/pages/match/cubits/match_state.dart' as _i29;
import 'package:mon_pacing/pages/pacing/cubits/pacing_cubit.dart' as _i42;
import 'package:mon_pacing/pages/pacing/cubits/pacing_state.dart' as _i26;
import 'package:mon_pacing/repositories/matches_repository.dart' as _i14;
import 'package:mon_pacing/repositories/pacings_repository.dart' as _i10;
import 'package:mon_pacing/repositories/teams_repository.dart' as _i18;
import 'package:mon_pacing/services/analytics_service.dart' as _i15;
import 'package:mon_pacing/services/excel_service.dart' as _i28;
import 'package:mon_pacing/services/package_info_service.dart' as _i31;
import 'package:mon_pacing/services/timer_service.dart' as _i22;
import 'package:mon_pacing/services/toaster_service.dart' as _i11;
import 'package:toastification/toastification.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeToastification_0 extends _i1.SmartFake
    implements _i2.Toastification {
  _FakeToastification_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseAnalytics_1 extends _i1.SmartFake
    implements _i3.FirebaseAnalytics {
  _FakeFirebaseAnalytics_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSettingsState_2 extends _i1.SmartFake implements _i4.SettingsState {
  _FakeSettingsState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTutorialsState_3 extends _i1.SmartFake
    implements _i5.TutorialsState {
  _FakeTutorialsState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOnboardingState_4 extends _i1.SmartFake
    implements _i6.OnboardingState {
  _FakeOnboardingState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseRemoteConfig_5 extends _i1.SmartFake
    implements _i7.FirebaseRemoteConfig {
  _FakeFirebaseRemoteConfig_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIntegrationsState_6 extends _i1.SmartFake
    implements _i8.IntegrationsState {
  _FakeIntegrationsState_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFeatureFlagsState_7 extends _i1.SmartFake
    implements _i9.FeatureFlagsState {
  _FakeFeatureFlagsState_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePacingsRepository_8 extends _i1.SmartFake
    implements _i10.PacingsRepository {
  _FakePacingsRepository_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeToasterService_9 extends _i1.SmartFake
    implements _i11.ToasterService {
  _FakeToasterService_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePacingsState_10 extends _i1.SmartFake implements _i12.PacingsState {
  _FakePacingsState_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePacingModel_11 extends _i1.SmartFake implements _i13.PacingModel {
  _FakePacingModel_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatchesRepository_12 extends _i1.SmartFake
    implements _i14.MatchesRepository {
  _FakeMatchesRepository_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAnalyticsService_13 extends _i1.SmartFake
    implements _i15.AnalyticsService {
  _FakeAnalyticsService_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatchesState_14 extends _i1.SmartFake implements _i16.MatchesState {
  _FakeMatchesState_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatchModel_15 extends _i1.SmartFake implements _i17.MatchModel {
  _FakeMatchModel_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTeamsRepository_16 extends _i1.SmartFake
    implements _i18.TeamsRepository {
  _FakeTeamsRepository_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTeamsState_17 extends _i1.SmartFake implements _i19.TeamsState {
  _FakeTeamsState_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTeamModel_18 extends _i1.SmartFake implements _i20.TeamModel {
  _FakeTeamModel_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSettingsCubit_19 extends _i1.SmartFake
    implements _i21.SettingsCubit {
  _FakeSettingsCubit_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTimerService_20 extends _i1.SmartFake implements _i22.TimerService {
  _FakeTimerService_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIntegrationsCubit_21 extends _i1.SmartFake
    implements _i23.IntegrationsCubit {
  _FakeIntegrationsCubit_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTimerState_22 extends _i1.SmartFake implements _i24.TimerState {
  _FakeTimerState_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePacingsCubit_23 extends _i1.SmartFake implements _i25.PacingsCubit {
  _FakePacingsCubit_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePacingState_24 extends _i1.SmartFake implements _i26.PacingState {
  _FakePacingState_24(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatchesCubit_25 extends _i1.SmartFake implements _i27.MatchesCubit {
  _FakeMatchesCubit_25(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeExcelService_26 extends _i1.SmartFake implements _i28.ExcelService {
  _FakeExcelService_26(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatchState_27 extends _i1.SmartFake implements _i29.MatchState {
  _FakeMatchState_27(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ToasterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockToasterService extends _i1.Mock implements _i11.ToasterService {
  @override
  _i2.Toastification get toastification =>
      (super.noSuchMethod(
            Invocation.getter(#toastification),
            returnValue: _FakeToastification_0(
              this,
              Invocation.getter(#toastification),
            ),
            returnValueForMissingStub: _FakeToastification_0(
              this,
              Invocation.getter(#toastification),
            ),
          )
          as _i2.Toastification);

  @override
  void show({
    required String? title,
    String? description,
    _i2.ToastificationType? type = _i2.ToastificationType.success,
    bool? autoClose = true,
  }) => super.noSuchMethod(
    Invocation.method(#show, [], {
      #title: title,
      #description: description,
      #type: type,
      #autoClose: autoClose,
    }),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ExcelService].
///
/// See the documentation for Mockito's code generation for more information.
class MockExcelService extends _i1.Mock implements _i28.ExcelService {
  @override
  List<int>? exportMatchToExcel(_i17.MatchModel? match, _i30.S? localizer) =>
      (super.noSuchMethod(
            Invocation.method(#exportMatchToExcel, [match, localizer]),
            returnValueForMissingStub: null,
          )
          as List<int>?);
}

/// A class which mocks [PackageInfoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfoService extends _i1.Mock
    implements _i31.PackageInfoService {
  @override
  _i32.Future<String> getAppVersion() =>
      (super.noSuchMethod(
            Invocation.method(#getAppVersion, []),
            returnValue: _i32.Future<String>.value(
              _i33.dummyValue<String>(
                this,
                Invocation.method(#getAppVersion, []),
              ),
            ),
            returnValueForMissingStub: _i32.Future<String>.value(
              _i33.dummyValue<String>(
                this,
                Invocation.method(#getAppVersion, []),
              ),
            ),
          )
          as _i32.Future<String>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i15.AnalyticsService {
  @override
  _i3.FirebaseAnalytics get analytics =>
      (super.noSuchMethod(
            Invocation.getter(#analytics),
            returnValue: _FakeFirebaseAnalytics_1(
              this,
              Invocation.getter(#analytics),
            ),
            returnValueForMissingStub: _FakeFirebaseAnalytics_1(
              this,
              Invocation.getter(#analytics),
            ),
          )
          as _i3.FirebaseAnalytics);

  @override
  _i32.Future<void> logExportToExcel() =>
      (super.noSuchMethod(
            Invocation.method(#logExportToExcel, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> logStartMatch(_i17.MatchModel? match) =>
      (super.noSuchMethod(
            Invocation.method(#logStartMatch, [match]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> logIntegration(_i34.IntegrationBase? integration) =>
      (super.noSuchMethod(
            Invocation.method(#logIntegration, [integration]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);
}

/// A class which mocks [SettingsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsCubit extends _i1.Mock implements _i21.SettingsCubit {
  @override
  _i4.SettingsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeSettingsState_2(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeSettingsState_2(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i4.SettingsState);

  @override
  _i32.Stream<_i4.SettingsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i32.Stream<_i4.SettingsState>.empty(),
            returnValueForMissingStub: _i32.Stream<_i4.SettingsState>.empty(),
          )
          as _i32.Stream<_i4.SettingsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i33.dummyValue<String>(this, Invocation.getter(#id)),
            returnValueForMissingStub: _i33.dummyValue<String>(
              this,
              Invocation.getter(#id),
            ),
          )
          as String);

  @override
  String get storagePrefix =>
      (super.noSuchMethod(
            Invocation.getter(#storagePrefix),
            returnValue: _i33.dummyValue<String>(
              this,
              Invocation.getter(#storagePrefix),
            ),
            returnValueForMissingStub: _i33.dummyValue<String>(
              this,
              Invocation.getter(#storagePrefix),
            ),
          )
          as String);

  @override
  String get storageToken =>
      (super.noSuchMethod(
            Invocation.getter(#storageToken),
            returnValue: _i33.dummyValue<String>(
              this,
              Invocation.getter(#storageToken),
            ),
            returnValueForMissingStub: _i33.dummyValue<String>(
              this,
              Invocation.getter(#storageToken),
            ),
          )
          as String);

  @override
  void edit(_i4.SettingsState? model) => super.noSuchMethod(
    Invocation.method(#edit, [model]),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> vibrate(_i35.HapticsType? type) =>
      (super.noSuchMethod(
            Invocation.method(#vibrate, [type]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  void reset() => super.noSuchMethod(
    Invocation.method(#reset, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.SettingsState? fromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
            Invocation.method(#fromJson, [json]),
            returnValueForMissingStub: null,
          )
          as _i4.SettingsState?);

  @override
  Map<String, dynamic>? toJson(_i4.SettingsState? state) =>
      (super.noSuchMethod(
            Invocation.method(#toJson, [state]),
            returnValueForMissingStub: null,
          )
          as Map<String, dynamic>?);

  @override
  void emit(_i4.SettingsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i36.Change<_i4.SettingsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  void hydrate({
    _i36.Storage? storage,
    _i36.OnHydrationError? onError = _i36.defaultOnHydrationError,
  }) => super.noSuchMethod(
    Invocation.method(#hydrate, [], {#storage: storage, #onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);
}

/// A class which mocks [TutorialsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTutorialsCubit extends _i1.Mock implements _i37.TutorialsCubit {
  @override
  _i5.TutorialsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTutorialsState_3(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeTutorialsState_3(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i5.TutorialsState);

  @override
  _i32.Stream<_i5.TutorialsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i32.Stream<_i5.TutorialsState>.empty(),
            returnValueForMissingStub: _i32.Stream<_i5.TutorialsState>.empty(),
          )
          as _i32.Stream<_i5.TutorialsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i33.dummyValue<String>(this, Invocation.getter(#id)),
            returnValueForMissingStub: _i33.dummyValue<String>(
              this,
              Invocation.getter(#id),
            ),
          )
          as String);

  @override
  String get storagePrefix =>
      (super.noSuchMethod(
            Invocation.getter(#storagePrefix),
            returnValue: _i33.dummyValue<String>(
              this,
              Invocation.getter(#storagePrefix),
            ),
            returnValueForMissingStub: _i33.dummyValue<String>(
              this,
              Invocation.getter(#storagePrefix),
            ),
          )
          as String);

  @override
  String get storageToken =>
      (super.noSuchMethod(
            Invocation.getter(#storageToken),
            returnValue: _i33.dummyValue<String>(
              this,
              Invocation.getter(#storageToken),
            ),
            returnValueForMissingStub: _i33.dummyValue<String>(
              this,
              Invocation.getter(#storageToken),
            ),
          )
          as String);

  @override
  void setAddPacingFinished() => super.noSuchMethod(
    Invocation.method(#setAddPacingFinished, []),
    returnValueForMissingStub: null,
  );

  @override
  void setStartMatchFinished() => super.noSuchMethod(
    Invocation.method(#setStartMatchFinished, []),
    returnValueForMissingStub: null,
  );

  @override
  void setAddImprovisationFinished() => super.noSuchMethod(
    Invocation.method(#setAddImprovisationFinished, []),
    returnValueForMissingStub: null,
  );

  @override
  void setImprovisationFinished() => super.noSuchMethod(
    Invocation.method(#setImprovisationFinished, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.TutorialsState? fromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
            Invocation.method(#fromJson, [json]),
            returnValueForMissingStub: null,
          )
          as _i5.TutorialsState?);

  @override
  Map<String, dynamic>? toJson(_i5.TutorialsState? state) =>
      (super.noSuchMethod(
            Invocation.method(#toJson, [state]),
            returnValueForMissingStub: null,
          )
          as Map<String, dynamic>?);

  @override
  void emit(_i5.TutorialsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i36.Change<_i5.TutorialsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  void hydrate({
    _i36.Storage? storage,
    _i36.OnHydrationError? onError = _i36.defaultOnHydrationError,
  }) => super.noSuchMethod(
    Invocation.method(#hydrate, [], {#storage: storage, #onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);
}

/// A class which mocks [OnboardingCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockOnboardingCubit extends _i1.Mock implements _i38.OnboardingCubit {
  @override
  _i6.OnboardingState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeOnboardingState_4(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeOnboardingState_4(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i6.OnboardingState);

  @override
  _i32.Stream<_i6.OnboardingState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i32.Stream<_i6.OnboardingState>.empty(),
            returnValueForMissingStub: _i32.Stream<_i6.OnboardingState>.empty(),
          )
          as _i32.Stream<_i6.OnboardingState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i33.dummyValue<String>(this, Invocation.getter(#id)),
            returnValueForMissingStub: _i33.dummyValue<String>(
              this,
              Invocation.getter(#id),
            ),
          )
          as String);

  @override
  String get storagePrefix =>
      (super.noSuchMethod(
            Invocation.getter(#storagePrefix),
            returnValue: _i33.dummyValue<String>(
              this,
              Invocation.getter(#storagePrefix),
            ),
            returnValueForMissingStub: _i33.dummyValue<String>(
              this,
              Invocation.getter(#storagePrefix),
            ),
          )
          as String);

  @override
  String get storageToken =>
      (super.noSuchMethod(
            Invocation.getter(#storageToken),
            returnValue: _i33.dummyValue<String>(
              this,
              Invocation.getter(#storageToken),
            ),
            returnValueForMissingStub: _i33.dummyValue<String>(
              this,
              Invocation.getter(#storageToken),
            ),
          )
          as String);

  @override
  void finishOnboarding() => super.noSuchMethod(
    Invocation.method(#finishOnboarding, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.OnboardingState? fromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
            Invocation.method(#fromJson, [json]),
            returnValueForMissingStub: null,
          )
          as _i6.OnboardingState?);

  @override
  Map<String, dynamic>? toJson(_i6.OnboardingState? state) =>
      (super.noSuchMethod(
            Invocation.method(#toJson, [state]),
            returnValueForMissingStub: null,
          )
          as Map<String, dynamic>?);

  @override
  void emit(_i6.OnboardingState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i36.Change<_i6.OnboardingState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  void hydrate({
    _i36.Storage? storage,
    _i36.OnHydrationError? onError = _i36.defaultOnHydrationError,
  }) => super.noSuchMethod(
    Invocation.method(#hydrate, [], {#storage: storage, #onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);
}

/// A class which mocks [IntegrationsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockIntegrationsCubit extends _i1.Mock implements _i23.IntegrationsCubit {
  @override
  _i7.FirebaseRemoteConfig get remoteConfig =>
      (super.noSuchMethod(
            Invocation.getter(#remoteConfig),
            returnValue: _FakeFirebaseRemoteConfig_5(
              this,
              Invocation.getter(#remoteConfig),
            ),
            returnValueForMissingStub: _FakeFirebaseRemoteConfig_5(
              this,
              Invocation.getter(#remoteConfig),
            ),
          )
          as _i7.FirebaseRemoteConfig);

  @override
  _i8.IntegrationsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeIntegrationsState_6(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeIntegrationsState_6(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i8.IntegrationsState);

  @override
  _i32.Stream<_i8.IntegrationsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i32.Stream<_i8.IntegrationsState>.empty(),
            returnValueForMissingStub:
                _i32.Stream<_i8.IntegrationsState>.empty(),
          )
          as _i32.Stream<_i8.IntegrationsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i32.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  void emit(_i8.IntegrationsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i36.Change<_i8.IntegrationsState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [FeatureFlagsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeatureFlagsCubit extends _i1.Mock implements _i39.FeatureFlagsCubit {
  @override
  _i7.FirebaseRemoteConfig get remoteConfig =>
      (super.noSuchMethod(
            Invocation.getter(#remoteConfig),
            returnValue: _FakeFirebaseRemoteConfig_5(
              this,
              Invocation.getter(#remoteConfig),
            ),
            returnValueForMissingStub: _FakeFirebaseRemoteConfig_5(
              this,
              Invocation.getter(#remoteConfig),
            ),
          )
          as _i7.FirebaseRemoteConfig);

  @override
  _i9.FeatureFlagsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeFeatureFlagsState_7(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeFeatureFlagsState_7(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i9.FeatureFlagsState);

  @override
  _i32.Stream<_i9.FeatureFlagsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i32.Stream<_i9.FeatureFlagsState>.empty(),
            returnValueForMissingStub:
                _i32.Stream<_i9.FeatureFlagsState>.empty(),
          )
          as _i32.Stream<_i9.FeatureFlagsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i32.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  void emit(_i9.FeatureFlagsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i36.Change<_i9.FeatureFlagsState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PacingsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPacingsCubit extends _i1.Mock implements _i25.PacingsCubit {
  @override
  _i10.PacingsRepository get pacingsRepository =>
      (super.noSuchMethod(
            Invocation.getter(#pacingsRepository),
            returnValue: _FakePacingsRepository_8(
              this,
              Invocation.getter(#pacingsRepository),
            ),
            returnValueForMissingStub: _FakePacingsRepository_8(
              this,
              Invocation.getter(#pacingsRepository),
            ),
          )
          as _i10.PacingsRepository);

  @override
  _i11.ToasterService get toasterService =>
      (super.noSuchMethod(
            Invocation.getter(#toasterService),
            returnValue: _FakeToasterService_9(
              this,
              Invocation.getter(#toasterService),
            ),
            returnValueForMissingStub: _FakeToasterService_9(
              this,
              Invocation.getter(#toasterService),
            ),
          )
          as _i11.ToasterService);

  @override
  _i12.PacingsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakePacingsState_10(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakePacingsState_10(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i12.PacingsState);

  @override
  _i32.Stream<_i12.PacingsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i32.Stream<_i12.PacingsState>.empty(),
            returnValueForMissingStub: _i32.Stream<_i12.PacingsState>.empty(),
          )
          as _i32.Stream<_i12.PacingsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i32.Future<_i13.PacingModel?> add(_i13.PacingModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#add, [model]),
            returnValue: _i32.Future<_i13.PacingModel?>.value(),
            returnValueForMissingStub: _i32.Future<_i13.PacingModel?>.value(),
          )
          as _i32.Future<_i13.PacingModel?>);

  @override
  _i32.Future<_i13.PacingModel> edit(_i13.PacingModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#edit, [model]),
            returnValue: _i32.Future<_i13.PacingModel>.value(
              _FakePacingModel_11(this, Invocation.method(#edit, [model])),
            ),
            returnValueForMissingStub: _i32.Future<_i13.PacingModel>.value(
              _FakePacingModel_11(this, Invocation.method(#edit, [model])),
            ),
          )
          as _i32.Future<_i13.PacingModel>);

  @override
  _i32.Future<void> delete(_i13.PacingModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [model]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> selectTag(String? tag) =>
      (super.noSuchMethod(
            Invocation.method(#selectTag, [tag]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> deselectTag(String? tag) =>
      (super.noSuchMethod(
            Invocation.method(#deselectTag, [tag]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> fetch() =>
      (super.noSuchMethod(
            Invocation.method(#fetch, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> refresh() =>
      (super.noSuchMethod(
            Invocation.method(#refresh, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<_i13.PacingModel?> import() =>
      (super.noSuchMethod(
            Invocation.method(#import, []),
            returnValue: _i32.Future<_i13.PacingModel?>.value(),
            returnValueForMissingStub: _i32.Future<_i13.PacingModel?>.value(),
          )
          as _i32.Future<_i13.PacingModel?>);

  @override
  _i32.Future<bool> export(_i13.PacingModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#export, [model]),
            returnValue: _i32.Future<bool>.value(false),
            returnValueForMissingStub: _i32.Future<bool>.value(false),
          )
          as _i32.Future<bool>);

  @override
  void emit(_i12.PacingsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i36.Change<_i12.PacingsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);
}

/// A class which mocks [MatchesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchesCubit extends _i1.Mock implements _i27.MatchesCubit {
  @override
  _i14.MatchesRepository get matchesRepository =>
      (super.noSuchMethod(
            Invocation.getter(#matchesRepository),
            returnValue: _FakeMatchesRepository_12(
              this,
              Invocation.getter(#matchesRepository),
            ),
            returnValueForMissingStub: _FakeMatchesRepository_12(
              this,
              Invocation.getter(#matchesRepository),
            ),
          )
          as _i14.MatchesRepository);

  @override
  _i11.ToasterService get toasterService =>
      (super.noSuchMethod(
            Invocation.getter(#toasterService),
            returnValue: _FakeToasterService_9(
              this,
              Invocation.getter(#toasterService),
            ),
            returnValueForMissingStub: _FakeToasterService_9(
              this,
              Invocation.getter(#toasterService),
            ),
          )
          as _i11.ToasterService);

  @override
  _i15.AnalyticsService get analyticsService =>
      (super.noSuchMethod(
            Invocation.getter(#analyticsService),
            returnValue: _FakeAnalyticsService_13(
              this,
              Invocation.getter(#analyticsService),
            ),
            returnValueForMissingStub: _FakeAnalyticsService_13(
              this,
              Invocation.getter(#analyticsService),
            ),
          )
          as _i15.AnalyticsService);

  @override
  _i16.MatchesState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeMatchesState_14(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeMatchesState_14(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i16.MatchesState);

  @override
  _i32.Stream<_i16.MatchesState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i32.Stream<_i16.MatchesState>.empty(),
            returnValueForMissingStub: _i32.Stream<_i16.MatchesState>.empty(),
          )
          as _i32.Stream<_i16.MatchesState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i32.Future<_i17.MatchModel?> add(_i17.MatchModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#add, [model]),
            returnValue: _i32.Future<_i17.MatchModel?>.value(),
            returnValueForMissingStub: _i32.Future<_i17.MatchModel?>.value(),
          )
          as _i32.Future<_i17.MatchModel?>);

  @override
  _i32.Future<_i17.MatchModel> edit(_i17.MatchModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#edit, [model]),
            returnValue: _i32.Future<_i17.MatchModel>.value(
              _FakeMatchModel_15(this, Invocation.method(#edit, [model])),
            ),
            returnValueForMissingStub: _i32.Future<_i17.MatchModel>.value(
              _FakeMatchModel_15(this, Invocation.method(#edit, [model])),
            ),
          )
          as _i32.Future<_i17.MatchModel>);

  @override
  _i32.Future<void> delete(_i17.MatchModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [model]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> selectTag(String? tag) =>
      (super.noSuchMethod(
            Invocation.method(#selectTag, [tag]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> deselectTag(String? tag) =>
      (super.noSuchMethod(
            Invocation.method(#deselectTag, [tag]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> fetch() =>
      (super.noSuchMethod(
            Invocation.method(#fetch, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> refresh() =>
      (super.noSuchMethod(
            Invocation.method(#refresh, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  void emit(_i16.MatchesState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i36.Change<_i16.MatchesState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);
}

/// A class which mocks [TeamsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTeamsCubit extends _i1.Mock implements _i40.TeamsCubit {
  @override
  _i18.TeamsRepository get teamsRepository =>
      (super.noSuchMethod(
            Invocation.getter(#teamsRepository),
            returnValue: _FakeTeamsRepository_16(
              this,
              Invocation.getter(#teamsRepository),
            ),
            returnValueForMissingStub: _FakeTeamsRepository_16(
              this,
              Invocation.getter(#teamsRepository),
            ),
          )
          as _i18.TeamsRepository);

  @override
  _i11.ToasterService get toasterService =>
      (super.noSuchMethod(
            Invocation.getter(#toasterService),
            returnValue: _FakeToasterService_9(
              this,
              Invocation.getter(#toasterService),
            ),
            returnValueForMissingStub: _FakeToasterService_9(
              this,
              Invocation.getter(#toasterService),
            ),
          )
          as _i11.ToasterService);

  @override
  _i19.TeamsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTeamsState_17(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeTeamsState_17(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i19.TeamsState);

  @override
  _i32.Stream<_i19.TeamsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i32.Stream<_i19.TeamsState>.empty(),
            returnValueForMissingStub: _i32.Stream<_i19.TeamsState>.empty(),
          )
          as _i32.Stream<_i19.TeamsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i32.Future<_i20.TeamModel?> add(_i20.TeamModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#add, [model]),
            returnValue: _i32.Future<_i20.TeamModel?>.value(),
            returnValueForMissingStub: _i32.Future<_i20.TeamModel?>.value(),
          )
          as _i32.Future<_i20.TeamModel?>);

  @override
  _i32.Future<_i20.TeamModel> edit(_i20.TeamModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#edit, [model]),
            returnValue: _i32.Future<_i20.TeamModel>.value(
              _FakeTeamModel_18(this, Invocation.method(#edit, [model])),
            ),
            returnValueForMissingStub: _i32.Future<_i20.TeamModel>.value(
              _FakeTeamModel_18(this, Invocation.method(#edit, [model])),
            ),
          )
          as _i32.Future<_i20.TeamModel>);

  @override
  _i32.Future<void> delete(_i20.TeamModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [model]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> selectTag(String? tag) =>
      (super.noSuchMethod(
            Invocation.method(#selectTag, [tag]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> deselectTag(String? tag) =>
      (super.noSuchMethod(
            Invocation.method(#deselectTag, [tag]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> fetch() =>
      (super.noSuchMethod(
            Invocation.method(#fetch, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> refresh() =>
      (super.noSuchMethod(
            Invocation.method(#refresh, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<_i20.TeamModel?> import() =>
      (super.noSuchMethod(
            Invocation.method(#import, []),
            returnValue: _i32.Future<_i20.TeamModel?>.value(),
            returnValueForMissingStub: _i32.Future<_i20.TeamModel?>.value(),
          )
          as _i32.Future<_i20.TeamModel?>);

  @override
  _i32.Future<bool> export(_i20.TeamModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#export, [model]),
            returnValue: _i32.Future<bool>.value(false),
            returnValueForMissingStub: _i32.Future<bool>.value(false),
          )
          as _i32.Future<bool>);

  @override
  void emit(_i19.TeamsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i36.Change<_i19.TeamsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);
}

/// A class which mocks [TimerCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerCubit extends _i1.Mock implements _i41.TimerCubit {
  @override
  _i21.SettingsCubit get settingsCubit =>
      (super.noSuchMethod(
            Invocation.getter(#settingsCubit),
            returnValue: _FakeSettingsCubit_19(
              this,
              Invocation.getter(#settingsCubit),
            ),
            returnValueForMissingStub: _FakeSettingsCubit_19(
              this,
              Invocation.getter(#settingsCubit),
            ),
          )
          as _i21.SettingsCubit);

  @override
  _i11.ToasterService get toasterService =>
      (super.noSuchMethod(
            Invocation.getter(#toasterService),
            returnValue: _FakeToasterService_9(
              this,
              Invocation.getter(#toasterService),
            ),
            returnValueForMissingStub: _FakeToasterService_9(
              this,
              Invocation.getter(#toasterService),
            ),
          )
          as _i11.ToasterService);

  @override
  _i22.TimerService get timerService =>
      (super.noSuchMethod(
            Invocation.getter(#timerService),
            returnValue: _FakeTimerService_20(
              this,
              Invocation.getter(#timerService),
            ),
            returnValueForMissingStub: _FakeTimerService_20(
              this,
              Invocation.getter(#timerService),
            ),
          )
          as _i22.TimerService);

  @override
  _i23.IntegrationsCubit get integrationsCubit =>
      (super.noSuchMethod(
            Invocation.getter(#integrationsCubit),
            returnValue: _FakeIntegrationsCubit_21(
              this,
              Invocation.getter(#integrationsCubit),
            ),
            returnValueForMissingStub: _FakeIntegrationsCubit_21(
              this,
              Invocation.getter(#integrationsCubit),
            ),
          )
          as _i23.IntegrationsCubit);

  @override
  _i24.TimerState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTimerState_22(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeTimerState_22(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i24.TimerState);

  @override
  _i32.Stream<_i24.TimerState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i32.Stream<_i24.TimerState>.empty(),
            returnValueForMissingStub: _i32.Stream<_i24.TimerState>.empty(),
          )
          as _i32.Stream<_i24.TimerState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i32.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> start(
    _i17.MatchModel? match,
    int? improvisationId,
    int? durationIndex,
    Duration? duration,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#start, [
              match,
              improvisationId,
              durationIndex,
              duration,
            ]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  void resume() => super.noSuchMethod(
    Invocation.method(#resume, []),
    returnValueForMissingStub: null,
  );

  @override
  void pause() => super.noSuchMethod(
    Invocation.method(#pause, []),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> stop() =>
      (super.noSuchMethod(
            Invocation.method(#stop, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  void onChange(_i36.Change<_i24.TimerState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  void emit(_i24.TimerState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PacingCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPacingCubit extends _i1.Mock implements _i42.PacingCubit {
  @override
  _i10.PacingsRepository get pacingsRepository =>
      (super.noSuchMethod(
            Invocation.getter(#pacingsRepository),
            returnValue: _FakePacingsRepository_8(
              this,
              Invocation.getter(#pacingsRepository),
            ),
            returnValueForMissingStub: _FakePacingsRepository_8(
              this,
              Invocation.getter(#pacingsRepository),
            ),
          )
          as _i10.PacingsRepository);

  @override
  _i25.PacingsCubit get pacingsCubit =>
      (super.noSuchMethod(
            Invocation.getter(#pacingsCubit),
            returnValue: _FakePacingsCubit_23(
              this,
              Invocation.getter(#pacingsCubit),
            ),
            returnValueForMissingStub: _FakePacingsCubit_23(
              this,
              Invocation.getter(#pacingsCubit),
            ),
          )
          as _i25.PacingsCubit);

  @override
  _i21.SettingsCubit get settingsCubit =>
      (super.noSuchMethod(
            Invocation.getter(#settingsCubit),
            returnValue: _FakeSettingsCubit_19(
              this,
              Invocation.getter(#settingsCubit),
            ),
            returnValueForMissingStub: _FakeSettingsCubit_19(
              this,
              Invocation.getter(#settingsCubit),
            ),
          )
          as _i21.SettingsCubit);

  @override
  _i26.PacingState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakePacingState_24(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakePacingState_24(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i26.PacingState);

  @override
  _i32.Stream<_i26.PacingState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i32.Stream<_i26.PacingState>.empty(),
            returnValueForMissingStub: _i32.Stream<_i26.PacingState>.empty(),
          )
          as _i32.Stream<_i26.PacingState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i32.Future<void> initialize(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [id]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> edit(_i13.PacingModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#edit, [model]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> addImprovisation() =>
      (super.noSuchMethod(
            Invocation.method(#addImprovisation, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> moveImprovisation(int? oldIndex, int? newIndex) =>
      (super.noSuchMethod(
            Invocation.method(#moveImprovisation, [oldIndex, newIndex]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> removeImprovisation(
    _i43.ImprovisationModel? improvisation,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeImprovisation, [improvisation]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> editImprovisation(_i43.ImprovisationModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#editImprovisation, [model]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  void emit(_i26.PacingState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i36.Change<_i26.PacingState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);
}

/// A class which mocks [MatchCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchCubit extends _i1.Mock implements _i44.MatchCubit {
  @override
  _i14.MatchesRepository get matchesRepository =>
      (super.noSuchMethod(
            Invocation.getter(#matchesRepository),
            returnValue: _FakeMatchesRepository_12(
              this,
              Invocation.getter(#matchesRepository),
            ),
            returnValueForMissingStub: _FakeMatchesRepository_12(
              this,
              Invocation.getter(#matchesRepository),
            ),
          )
          as _i14.MatchesRepository);

  @override
  _i27.MatchesCubit get matchesCubit =>
      (super.noSuchMethod(
            Invocation.getter(#matchesCubit),
            returnValue: _FakeMatchesCubit_25(
              this,
              Invocation.getter(#matchesCubit),
            ),
            returnValueForMissingStub: _FakeMatchesCubit_25(
              this,
              Invocation.getter(#matchesCubit),
            ),
          )
          as _i27.MatchesCubit);

  @override
  _i11.ToasterService get toasterService =>
      (super.noSuchMethod(
            Invocation.getter(#toasterService),
            returnValue: _FakeToasterService_9(
              this,
              Invocation.getter(#toasterService),
            ),
            returnValueForMissingStub: _FakeToasterService_9(
              this,
              Invocation.getter(#toasterService),
            ),
          )
          as _i11.ToasterService);

  @override
  _i28.ExcelService get excelService =>
      (super.noSuchMethod(
            Invocation.getter(#excelService),
            returnValue: _FakeExcelService_26(
              this,
              Invocation.getter(#excelService),
            ),
            returnValueForMissingStub: _FakeExcelService_26(
              this,
              Invocation.getter(#excelService),
            ),
          )
          as _i28.ExcelService);

  @override
  _i15.AnalyticsService get analyticsService =>
      (super.noSuchMethod(
            Invocation.getter(#analyticsService),
            returnValue: _FakeAnalyticsService_13(
              this,
              Invocation.getter(#analyticsService),
            ),
            returnValueForMissingStub: _FakeAnalyticsService_13(
              this,
              Invocation.getter(#analyticsService),
            ),
          )
          as _i15.AnalyticsService);

  @override
  _i23.IntegrationsCubit get integrationsCubit =>
      (super.noSuchMethod(
            Invocation.getter(#integrationsCubit),
            returnValue: _FakeIntegrationsCubit_21(
              this,
              Invocation.getter(#integrationsCubit),
            ),
            returnValueForMissingStub: _FakeIntegrationsCubit_21(
              this,
              Invocation.getter(#integrationsCubit),
            ),
          )
          as _i23.IntegrationsCubit);

  @override
  _i29.MatchState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeMatchState_27(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeMatchState_27(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i29.MatchState);

  @override
  _i32.Stream<_i29.MatchState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i32.Stream<_i29.MatchState>.empty(),
            returnValueForMissingStub: _i32.Stream<_i29.MatchState>.empty(),
          )
          as _i32.Stream<_i29.MatchState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i32.Future<void> initialize(
    int? id, {
    int? improvisationId,
    int? durationIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [id],
              {
                #improvisationId: improvisationId,
                #durationIndex: durationIndex,
              },
            ),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> edit(_i17.MatchModel? match) =>
      (super.noSuchMethod(
            Invocation.method(#edit, [match]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> addImprovisation(
    _i43.ImprovisationModel? improvisation,
    int? index,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addImprovisation, [improvisation, index]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> editImprovisation(
    _i43.ImprovisationModel? improvisation,
    int? index,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#editImprovisation, [improvisation, index]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> removeImprovisation(
    _i43.ImprovisationModel? improvisation,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeImprovisation, [improvisation]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  void changePage(int? page) => super.noSuchMethod(
    Invocation.method(#changePage, [page]),
    returnValueForMissingStub: null,
  );

  @override
  void changeDuration(int? durationIndex) => super.noSuchMethod(
    Invocation.method(#changeDuration, [durationIndex]),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> setPoint(int? improvisationId, int? teamId, int? value) =>
      (super.noSuchMethod(
            Invocation.method(#setPoint, [improvisationId, teamId, value]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> addPenalty(_i45.PenaltyModel? penalty) =>
      (super.noSuchMethod(
            Invocation.method(#addPenalty, [penalty]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> editPenalty(_i45.PenaltyModel? penalty) =>
      (super.noSuchMethod(
            Invocation.method(#editPenalty, [penalty]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> removePenalty(int? penaltyId) =>
      (super.noSuchMethod(
            Invocation.method(#removePenalty, [penaltyId]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> addStar() =>
      (super.noSuchMethod(
            Invocation.method(#addStar, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> editStar(_i46.StarModel? star) =>
      (super.noSuchMethod(
            Invocation.method(#editStar, [star]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> removeStar(_i46.StarModel? star) =>
      (super.noSuchMethod(
            Invocation.method(#removeStar, [star]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<void> moveStar(int? oldIndex, int? newIndex) =>
      (super.noSuchMethod(
            Invocation.method(#moveStar, [oldIndex, newIndex]),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);

  @override
  _i32.Future<bool> exportExcel() =>
      (super.noSuchMethod(
            Invocation.method(#exportExcel, []),
            returnValue: _i32.Future<bool>.value(false),
            returnValueForMissingStub: _i32.Future<bool>.value(false),
          )
          as _i32.Future<bool>);

  @override
  void onChange(_i36.Change<_i29.MatchState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i29.MatchState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i32.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i32.Future<void>.value(),
            returnValueForMissingStub: _i32.Future<void>.value(),
          )
          as _i32.Future<void>);
}
