// Mocks generated by Mockito 5.4.6 from annotations
// in mon_pacing/test/screenshots/generate_screenshots_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i28;

import 'package:firebase_analytics/firebase_analytics.dart' as _i3;
import 'package:firebase_remote_config/firebase_remote_config.dart' as _i5;
import 'package:haptic_feedback/haptic_feedback.dart' as _i32;
import 'package:hydrated_bloc/hydrated_bloc.dart' as _i33;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i29;
import 'package:mon_pacing/cubits/feature_flags/feature_flags_cubit.dart'
    as _i34;
import 'package:mon_pacing/cubits/feature_flags/feature_flags_state.dart'
    as _i6;
import 'package:mon_pacing/cubits/matches/matches_cubit.dart' as _i23;
import 'package:mon_pacing/cubits/matches/matches_state.dart' as _i13;
import 'package:mon_pacing/cubits/pacings/pacings_cubit.dart' as _i21;
import 'package:mon_pacing/cubits/pacings/pacings_state.dart' as _i9;
import 'package:mon_pacing/cubits/settings/settings_cubit.dart' as _i18;
import 'package:mon_pacing/cubits/settings/settings_state.dart' as _i4;
import 'package:mon_pacing/cubits/teams/teams_cubit.dart' as _i35;
import 'package:mon_pacing/cubits/teams/teams_state.dart' as _i16;
import 'package:mon_pacing/cubits/timer/timer_cubit.dart' as _i36;
import 'package:mon_pacing/cubits/timer/timer_state.dart' as _i20;
import 'package:mon_pacing/integrations/integration_base.dart' as _i31;
import 'package:mon_pacing/l10n/generated/app_localizations.dart' as _i26;
import 'package:mon_pacing/models/improvisation_model.dart' as _i38;
import 'package:mon_pacing/models/match_model.dart' as _i14;
import 'package:mon_pacing/models/pacing_model.dart' as _i10;
import 'package:mon_pacing/models/penalty_model.dart' as _i40;
import 'package:mon_pacing/models/star_model.dart' as _i41;
import 'package:mon_pacing/models/team_model.dart' as _i17;
import 'package:mon_pacing/pages/match/cubits/match_cubit.dart' as _i39;
import 'package:mon_pacing/pages/match/cubits/match_state.dart' as _i25;
import 'package:mon_pacing/pages/pacing/cubits/pacing_cubit.dart' as _i37;
import 'package:mon_pacing/pages/pacing/cubits/pacing_state.dart' as _i22;
import 'package:mon_pacing/repositories/matches_repository.dart' as _i11;
import 'package:mon_pacing/repositories/pacings_repository.dart' as _i7;
import 'package:mon_pacing/repositories/teams_repository.dart' as _i15;
import 'package:mon_pacing/services/analytics_service.dart' as _i12;
import 'package:mon_pacing/services/excel_service.dart' as _i24;
import 'package:mon_pacing/services/integration_service.dart' as _i30;
import 'package:mon_pacing/services/package_info_service.dart' as _i27;
import 'package:mon_pacing/services/timer_service.dart' as _i19;
import 'package:mon_pacing/services/toaster_service.dart' as _i8;
import 'package:toastification/toastification.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeToastification_0 extends _i1.SmartFake
    implements _i2.Toastification {
  _FakeToastification_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseAnalytics_1 extends _i1.SmartFake
    implements _i3.FirebaseAnalytics {
  _FakeFirebaseAnalytics_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSettingsState_2 extends _i1.SmartFake implements _i4.SettingsState {
  _FakeSettingsState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseRemoteConfig_3 extends _i1.SmartFake
    implements _i5.FirebaseRemoteConfig {
  _FakeFirebaseRemoteConfig_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFeatureFlagsState_4 extends _i1.SmartFake
    implements _i6.FeatureFlagsState {
  _FakeFeatureFlagsState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePacingsRepository_5 extends _i1.SmartFake
    implements _i7.PacingsRepository {
  _FakePacingsRepository_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeToasterService_6 extends _i1.SmartFake
    implements _i8.ToasterService {
  _FakeToasterService_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePacingsState_7 extends _i1.SmartFake implements _i9.PacingsState {
  _FakePacingsState_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePacingModel_8 extends _i1.SmartFake implements _i10.PacingModel {
  _FakePacingModel_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatchesRepository_9 extends _i1.SmartFake
    implements _i11.MatchesRepository {
  _FakeMatchesRepository_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAnalyticsService_10 extends _i1.SmartFake
    implements _i12.AnalyticsService {
  _FakeAnalyticsService_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatchesState_11 extends _i1.SmartFake implements _i13.MatchesState {
  _FakeMatchesState_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatchModel_12 extends _i1.SmartFake implements _i14.MatchModel {
  _FakeMatchModel_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTeamsRepository_13 extends _i1.SmartFake
    implements _i15.TeamsRepository {
  _FakeTeamsRepository_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTeamsState_14 extends _i1.SmartFake implements _i16.TeamsState {
  _FakeTeamsState_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTeamModel_15 extends _i1.SmartFake implements _i17.TeamModel {
  _FakeTeamModel_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSettingsCubit_16 extends _i1.SmartFake
    implements _i18.SettingsCubit {
  _FakeSettingsCubit_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTimerService_17 extends _i1.SmartFake implements _i19.TimerService {
  _FakeTimerService_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTimerState_18 extends _i1.SmartFake implements _i20.TimerState {
  _FakeTimerState_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePacingsCubit_19 extends _i1.SmartFake implements _i21.PacingsCubit {
  _FakePacingsCubit_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePacingState_20 extends _i1.SmartFake implements _i22.PacingState {
  _FakePacingState_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatchesCubit_21 extends _i1.SmartFake implements _i23.MatchesCubit {
  _FakeMatchesCubit_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeExcelService_22 extends _i1.SmartFake implements _i24.ExcelService {
  _FakeExcelService_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMatchState_23 extends _i1.SmartFake implements _i25.MatchState {
  _FakeMatchState_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ToasterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockToasterService extends _i1.Mock implements _i8.ToasterService {
  @override
  _i2.Toastification get toastification =>
      (super.noSuchMethod(
            Invocation.getter(#toastification),
            returnValue: _FakeToastification_0(
              this,
              Invocation.getter(#toastification),
            ),
            returnValueForMissingStub: _FakeToastification_0(
              this,
              Invocation.getter(#toastification),
            ),
          )
          as _i2.Toastification);

  @override
  void show({
    required String? title,
    String? description,
    _i2.ToastificationType? type = _i2.ToastificationType.success,
    bool? autoClose = true,
  }) => super.noSuchMethod(
    Invocation.method(#show, [], {
      #title: title,
      #description: description,
      #type: type,
      #autoClose: autoClose,
    }),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ExcelService].
///
/// See the documentation for Mockito's code generation for more information.
class MockExcelService extends _i1.Mock implements _i24.ExcelService {
  @override
  List<int>? exportMatchToExcel(_i14.MatchModel? match, _i26.S? localizer) =>
      (super.noSuchMethod(
            Invocation.method(#exportMatchToExcel, [match, localizer]),
            returnValueForMissingStub: null,
          )
          as List<int>?);
}

/// A class which mocks [PackageInfoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfoService extends _i1.Mock
    implements _i27.PackageInfoService {
  @override
  _i28.Future<String> getAppVersion() =>
      (super.noSuchMethod(
            Invocation.method(#getAppVersion, []),
            returnValue: _i28.Future<String>.value(
              _i29.dummyValue<String>(
                this,
                Invocation.method(#getAppVersion, []),
              ),
            ),
            returnValueForMissingStub: _i28.Future<String>.value(
              _i29.dummyValue<String>(
                this,
                Invocation.method(#getAppVersion, []),
              ),
            ),
          )
          as _i28.Future<String>);
}

/// A class which mocks [IntegrationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIntegrationService extends _i1.Mock
    implements _i30.IntegrationService {
  @override
  List<_i31.IntegrationBase> get integrations =>
      (super.noSuchMethod(
            Invocation.getter(#integrations),
            returnValue: <_i31.IntegrationBase>[],
            returnValueForMissingStub: <_i31.IntegrationBase>[],
          )
          as List<_i31.IntegrationBase>);

  @override
  T getIntegration<T extends _i31.IntegrationBase>(String? integrationId) =>
      (super.noSuchMethod(
            Invocation.method(#getIntegration, [integrationId]),
            returnValue: _i29.dummyValue<T>(
              this,
              Invocation.method(#getIntegration, [integrationId]),
            ),
            returnValueForMissingStub: _i29.dummyValue<T>(
              this,
              Invocation.method(#getIntegration, [integrationId]),
            ),
          )
          as T);

  @override
  List<T> getIntegrationsByType<T extends _i31.IntegrationBase>() =>
      (super.noSuchMethod(
            Invocation.method(#getIntegrationsByType, []),
            returnValue: <T>[],
            returnValueForMissingStub: <T>[],
          )
          as List<T>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i12.AnalyticsService {
  @override
  _i3.FirebaseAnalytics get analytics =>
      (super.noSuchMethod(
            Invocation.getter(#analytics),
            returnValue: _FakeFirebaseAnalytics_1(
              this,
              Invocation.getter(#analytics),
            ),
            returnValueForMissingStub: _FakeFirebaseAnalytics_1(
              this,
              Invocation.getter(#analytics),
            ),
          )
          as _i3.FirebaseAnalytics);

  @override
  _i28.Future<void> logExportToExcel() =>
      (super.noSuchMethod(
            Invocation.method(#logExportToExcel, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> logStartMatch(_i14.MatchModel? match) =>
      (super.noSuchMethod(
            Invocation.method(#logStartMatch, [match]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> logIntegration(_i31.IntegrationBase? integration) =>
      (super.noSuchMethod(
            Invocation.method(#logIntegration, [integration]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [SettingsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsCubit extends _i1.Mock implements _i18.SettingsCubit {
  @override
  _i4.SettingsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeSettingsState_2(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeSettingsState_2(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i4.SettingsState);

  @override
  _i28.Stream<_i4.SettingsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i4.SettingsState>.empty(),
            returnValueForMissingStub: _i28.Stream<_i4.SettingsState>.empty(),
          )
          as _i28.Stream<_i4.SettingsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i29.dummyValue<String>(this, Invocation.getter(#id)),
            returnValueForMissingStub: _i29.dummyValue<String>(
              this,
              Invocation.getter(#id),
            ),
          )
          as String);

  @override
  String get storagePrefix =>
      (super.noSuchMethod(
            Invocation.getter(#storagePrefix),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#storagePrefix),
            ),
            returnValueForMissingStub: _i29.dummyValue<String>(
              this,
              Invocation.getter(#storagePrefix),
            ),
          )
          as String);

  @override
  String get storageToken =>
      (super.noSuchMethod(
            Invocation.getter(#storageToken),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#storageToken),
            ),
            returnValueForMissingStub: _i29.dummyValue<String>(
              this,
              Invocation.getter(#storageToken),
            ),
          )
          as String);

  @override
  void edit(_i4.SettingsState? model) => super.noSuchMethod(
    Invocation.method(#edit, [model]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> vibrate(_i32.HapticsType? type) =>
      (super.noSuchMethod(
            Invocation.method(#vibrate, [type]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void reset() => super.noSuchMethod(
    Invocation.method(#reset, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.SettingsState? fromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
            Invocation.method(#fromJson, [json]),
            returnValueForMissingStub: null,
          )
          as _i4.SettingsState?);

  @override
  Map<String, dynamic>? toJson(_i4.SettingsState? state) =>
      (super.noSuchMethod(
            Invocation.method(#toJson, [state]),
            returnValueForMissingStub: null,
          )
          as Map<String, dynamic>?);

  @override
  void emit(_i4.SettingsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i33.Change<_i4.SettingsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void hydrate({
    _i33.Storage? storage,
    _i33.OnHydrationError? onError = _i33.defaultOnHydrationError,
  }) => super.noSuchMethod(
    Invocation.method(#hydrate, [], {#storage: storage, #onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [FeatureFlagsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeatureFlagsCubit extends _i1.Mock implements _i34.FeatureFlagsCubit {
  @override
  _i5.FirebaseRemoteConfig get remoteConfig =>
      (super.noSuchMethod(
            Invocation.getter(#remoteConfig),
            returnValue: _FakeFirebaseRemoteConfig_3(
              this,
              Invocation.getter(#remoteConfig),
            ),
            returnValueForMissingStub: _FakeFirebaseRemoteConfig_3(
              this,
              Invocation.getter(#remoteConfig),
            ),
          )
          as _i5.FirebaseRemoteConfig);

  @override
  _i6.FeatureFlagsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeFeatureFlagsState_4(
              this,
              Invocation.getter(#state),
            ),
            returnValueForMissingStub: _FakeFeatureFlagsState_4(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i6.FeatureFlagsState);

  @override
  _i28.Stream<_i6.FeatureFlagsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i6.FeatureFlagsState>.empty(),
            returnValueForMissingStub:
                _i28.Stream<_i6.FeatureFlagsState>.empty(),
          )
          as _i28.Stream<_i6.FeatureFlagsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void emit(_i6.FeatureFlagsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i33.Change<_i6.FeatureFlagsState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PacingsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPacingsCubit extends _i1.Mock implements _i21.PacingsCubit {
  @override
  _i7.PacingsRepository get pacingsRepository =>
      (super.noSuchMethod(
            Invocation.getter(#pacingsRepository),
            returnValue: _FakePacingsRepository_5(
              this,
              Invocation.getter(#pacingsRepository),
            ),
            returnValueForMissingStub: _FakePacingsRepository_5(
              this,
              Invocation.getter(#pacingsRepository),
            ),
          )
          as _i7.PacingsRepository);

  @override
  _i8.ToasterService get toasterService =>
      (super.noSuchMethod(
            Invocation.getter(#toasterService),
            returnValue: _FakeToasterService_6(
              this,
              Invocation.getter(#toasterService),
            ),
            returnValueForMissingStub: _FakeToasterService_6(
              this,
              Invocation.getter(#toasterService),
            ),
          )
          as _i8.ToasterService);

  @override
  _i9.PacingsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakePacingsState_7(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakePacingsState_7(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i9.PacingsState);

  @override
  _i28.Stream<_i9.PacingsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i9.PacingsState>.empty(),
            returnValueForMissingStub: _i28.Stream<_i9.PacingsState>.empty(),
          )
          as _i28.Stream<_i9.PacingsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i28.Future<_i10.PacingModel?> add(_i10.PacingModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#add, [model]),
            returnValue: _i28.Future<_i10.PacingModel?>.value(),
            returnValueForMissingStub: _i28.Future<_i10.PacingModel?>.value(),
          )
          as _i28.Future<_i10.PacingModel?>);

  @override
  _i28.Future<_i10.PacingModel> edit(_i10.PacingModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#edit, [model]),
            returnValue: _i28.Future<_i10.PacingModel>.value(
              _FakePacingModel_8(this, Invocation.method(#edit, [model])),
            ),
            returnValueForMissingStub: _i28.Future<_i10.PacingModel>.value(
              _FakePacingModel_8(this, Invocation.method(#edit, [model])),
            ),
          )
          as _i28.Future<_i10.PacingModel>);

  @override
  _i28.Future<void> delete(_i10.PacingModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [model]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> fetch() =>
      (super.noSuchMethod(
            Invocation.method(#fetch, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> refresh() =>
      (super.noSuchMethod(
            Invocation.method(#refresh, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<_i10.PacingModel?> import() =>
      (super.noSuchMethod(
            Invocation.method(#import, []),
            returnValue: _i28.Future<_i10.PacingModel?>.value(),
            returnValueForMissingStub: _i28.Future<_i10.PacingModel?>.value(),
          )
          as _i28.Future<_i10.PacingModel?>);

  @override
  _i28.Future<bool> export(_i10.PacingModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#export, [model]),
            returnValue: _i28.Future<bool>.value(false),
            returnValueForMissingStub: _i28.Future<bool>.value(false),
          )
          as _i28.Future<bool>);

  @override
  void emit(_i9.PacingsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i33.Change<_i9.PacingsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [MatchesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchesCubit extends _i1.Mock implements _i23.MatchesCubit {
  @override
  _i11.MatchesRepository get matchesRepository =>
      (super.noSuchMethod(
            Invocation.getter(#matchesRepository),
            returnValue: _FakeMatchesRepository_9(
              this,
              Invocation.getter(#matchesRepository),
            ),
            returnValueForMissingStub: _FakeMatchesRepository_9(
              this,
              Invocation.getter(#matchesRepository),
            ),
          )
          as _i11.MatchesRepository);

  @override
  _i8.ToasterService get toasterService =>
      (super.noSuchMethod(
            Invocation.getter(#toasterService),
            returnValue: _FakeToasterService_6(
              this,
              Invocation.getter(#toasterService),
            ),
            returnValueForMissingStub: _FakeToasterService_6(
              this,
              Invocation.getter(#toasterService),
            ),
          )
          as _i8.ToasterService);

  @override
  _i12.AnalyticsService get analyticsService =>
      (super.noSuchMethod(
            Invocation.getter(#analyticsService),
            returnValue: _FakeAnalyticsService_10(
              this,
              Invocation.getter(#analyticsService),
            ),
            returnValueForMissingStub: _FakeAnalyticsService_10(
              this,
              Invocation.getter(#analyticsService),
            ),
          )
          as _i12.AnalyticsService);

  @override
  _i13.MatchesState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeMatchesState_11(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeMatchesState_11(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i13.MatchesState);

  @override
  _i28.Stream<_i13.MatchesState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i13.MatchesState>.empty(),
            returnValueForMissingStub: _i28.Stream<_i13.MatchesState>.empty(),
          )
          as _i28.Stream<_i13.MatchesState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i28.Future<_i14.MatchModel?> add(_i14.MatchModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#add, [model]),
            returnValue: _i28.Future<_i14.MatchModel?>.value(),
            returnValueForMissingStub: _i28.Future<_i14.MatchModel?>.value(),
          )
          as _i28.Future<_i14.MatchModel?>);

  @override
  _i28.Future<_i14.MatchModel> edit(_i14.MatchModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#edit, [model]),
            returnValue: _i28.Future<_i14.MatchModel>.value(
              _FakeMatchModel_12(this, Invocation.method(#edit, [model])),
            ),
            returnValueForMissingStub: _i28.Future<_i14.MatchModel>.value(
              _FakeMatchModel_12(this, Invocation.method(#edit, [model])),
            ),
          )
          as _i28.Future<_i14.MatchModel>);

  @override
  _i28.Future<void> delete(_i14.MatchModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [model]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> fetch() =>
      (super.noSuchMethod(
            Invocation.method(#fetch, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> refresh() =>
      (super.noSuchMethod(
            Invocation.method(#refresh, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void emit(_i13.MatchesState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i33.Change<_i13.MatchesState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [TeamsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTeamsCubit extends _i1.Mock implements _i35.TeamsCubit {
  @override
  _i15.TeamsRepository get teamsRepository =>
      (super.noSuchMethod(
            Invocation.getter(#teamsRepository),
            returnValue: _FakeTeamsRepository_13(
              this,
              Invocation.getter(#teamsRepository),
            ),
            returnValueForMissingStub: _FakeTeamsRepository_13(
              this,
              Invocation.getter(#teamsRepository),
            ),
          )
          as _i15.TeamsRepository);

  @override
  _i8.ToasterService get toasterService =>
      (super.noSuchMethod(
            Invocation.getter(#toasterService),
            returnValue: _FakeToasterService_6(
              this,
              Invocation.getter(#toasterService),
            ),
            returnValueForMissingStub: _FakeToasterService_6(
              this,
              Invocation.getter(#toasterService),
            ),
          )
          as _i8.ToasterService);

  @override
  _i16.TeamsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTeamsState_14(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeTeamsState_14(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i16.TeamsState);

  @override
  _i28.Stream<_i16.TeamsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i16.TeamsState>.empty(),
            returnValueForMissingStub: _i28.Stream<_i16.TeamsState>.empty(),
          )
          as _i28.Stream<_i16.TeamsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i28.Future<_i17.TeamModel?> add(_i17.TeamModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#add, [model]),
            returnValue: _i28.Future<_i17.TeamModel?>.value(),
            returnValueForMissingStub: _i28.Future<_i17.TeamModel?>.value(),
          )
          as _i28.Future<_i17.TeamModel?>);

  @override
  _i28.Future<_i17.TeamModel> edit(_i17.TeamModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#edit, [model]),
            returnValue: _i28.Future<_i17.TeamModel>.value(
              _FakeTeamModel_15(this, Invocation.method(#edit, [model])),
            ),
            returnValueForMissingStub: _i28.Future<_i17.TeamModel>.value(
              _FakeTeamModel_15(this, Invocation.method(#edit, [model])),
            ),
          )
          as _i28.Future<_i17.TeamModel>);

  @override
  _i28.Future<void> delete(_i17.TeamModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [model]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> fetch() =>
      (super.noSuchMethod(
            Invocation.method(#fetch, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> refresh() =>
      (super.noSuchMethod(
            Invocation.method(#refresh, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<_i17.TeamModel?> import() =>
      (super.noSuchMethod(
            Invocation.method(#import, []),
            returnValue: _i28.Future<_i17.TeamModel?>.value(),
            returnValueForMissingStub: _i28.Future<_i17.TeamModel?>.value(),
          )
          as _i28.Future<_i17.TeamModel?>);

  @override
  _i28.Future<bool> export(_i17.TeamModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#export, [model]),
            returnValue: _i28.Future<bool>.value(false),
            returnValueForMissingStub: _i28.Future<bool>.value(false),
          )
          as _i28.Future<bool>);

  @override
  void emit(_i16.TeamsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i33.Change<_i16.TeamsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [TimerCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerCubit extends _i1.Mock implements _i36.TimerCubit {
  @override
  _i18.SettingsCubit get settingsCubit =>
      (super.noSuchMethod(
            Invocation.getter(#settingsCubit),
            returnValue: _FakeSettingsCubit_16(
              this,
              Invocation.getter(#settingsCubit),
            ),
            returnValueForMissingStub: _FakeSettingsCubit_16(
              this,
              Invocation.getter(#settingsCubit),
            ),
          )
          as _i18.SettingsCubit);

  @override
  _i8.ToasterService get toasterService =>
      (super.noSuchMethod(
            Invocation.getter(#toasterService),
            returnValue: _FakeToasterService_6(
              this,
              Invocation.getter(#toasterService),
            ),
            returnValueForMissingStub: _FakeToasterService_6(
              this,
              Invocation.getter(#toasterService),
            ),
          )
          as _i8.ToasterService);

  @override
  _i19.TimerService get timerService =>
      (super.noSuchMethod(
            Invocation.getter(#timerService),
            returnValue: _FakeTimerService_17(
              this,
              Invocation.getter(#timerService),
            ),
            returnValueForMissingStub: _FakeTimerService_17(
              this,
              Invocation.getter(#timerService),
            ),
          )
          as _i19.TimerService);

  @override
  _i20.TimerState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeTimerState_18(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeTimerState_18(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i20.TimerState);

  @override
  _i28.Stream<_i20.TimerState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i20.TimerState>.empty(),
            returnValueForMissingStub: _i28.Stream<_i20.TimerState>.empty(),
          )
          as _i28.Stream<_i20.TimerState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i28.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> start(
    int? matchId,
    String? matchName,
    int? improvisationId,
    int? durationIndex,
    Duration? duration,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#start, [
              matchId,
              matchName,
              improvisationId,
              durationIndex,
              duration,
            ]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void resume() => super.noSuchMethod(
    Invocation.method(#resume, []),
    returnValueForMissingStub: null,
  );

  @override
  void pause() => super.noSuchMethod(
    Invocation.method(#pause, []),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> stop() =>
      (super.noSuchMethod(
            Invocation.method(#stop, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void emit(_i20.TimerState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i33.Change<_i20.TimerState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PacingCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPacingCubit extends _i1.Mock implements _i37.PacingCubit {
  @override
  _i7.PacingsRepository get pacingsRepository =>
      (super.noSuchMethod(
            Invocation.getter(#pacingsRepository),
            returnValue: _FakePacingsRepository_5(
              this,
              Invocation.getter(#pacingsRepository),
            ),
            returnValueForMissingStub: _FakePacingsRepository_5(
              this,
              Invocation.getter(#pacingsRepository),
            ),
          )
          as _i7.PacingsRepository);

  @override
  _i21.PacingsCubit get pacingsCubit =>
      (super.noSuchMethod(
            Invocation.getter(#pacingsCubit),
            returnValue: _FakePacingsCubit_19(
              this,
              Invocation.getter(#pacingsCubit),
            ),
            returnValueForMissingStub: _FakePacingsCubit_19(
              this,
              Invocation.getter(#pacingsCubit),
            ),
          )
          as _i21.PacingsCubit);

  @override
  _i18.SettingsCubit get settingsCubit =>
      (super.noSuchMethod(
            Invocation.getter(#settingsCubit),
            returnValue: _FakeSettingsCubit_16(
              this,
              Invocation.getter(#settingsCubit),
            ),
            returnValueForMissingStub: _FakeSettingsCubit_16(
              this,
              Invocation.getter(#settingsCubit),
            ),
          )
          as _i18.SettingsCubit);

  @override
  _i22.PacingState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakePacingState_20(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakePacingState_20(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i22.PacingState);

  @override
  _i28.Stream<_i22.PacingState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i22.PacingState>.empty(),
            returnValueForMissingStub: _i28.Stream<_i22.PacingState>.empty(),
          )
          as _i28.Stream<_i22.PacingState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i28.Future<void> initialize(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [id]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> edit(_i10.PacingModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#edit, [model]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> addImprovisation() =>
      (super.noSuchMethod(
            Invocation.method(#addImprovisation, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> moveImprovisation(int? oldIndex, int? newIndex) =>
      (super.noSuchMethod(
            Invocation.method(#moveImprovisation, [oldIndex, newIndex]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> removeImprovisation(
    _i38.ImprovisationModel? improvisation,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeImprovisation, [improvisation]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> editImprovisation(_i38.ImprovisationModel? model) =>
      (super.noSuchMethod(
            Invocation.method(#editImprovisation, [model]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void emit(_i22.PacingState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i33.Change<_i22.PacingState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}

/// A class which mocks [MatchCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchCubit extends _i1.Mock implements _i39.MatchCubit {
  @override
  _i11.MatchesRepository get matchesRepository =>
      (super.noSuchMethod(
            Invocation.getter(#matchesRepository),
            returnValue: _FakeMatchesRepository_9(
              this,
              Invocation.getter(#matchesRepository),
            ),
            returnValueForMissingStub: _FakeMatchesRepository_9(
              this,
              Invocation.getter(#matchesRepository),
            ),
          )
          as _i11.MatchesRepository);

  @override
  _i23.MatchesCubit get matchesCubit =>
      (super.noSuchMethod(
            Invocation.getter(#matchesCubit),
            returnValue: _FakeMatchesCubit_21(
              this,
              Invocation.getter(#matchesCubit),
            ),
            returnValueForMissingStub: _FakeMatchesCubit_21(
              this,
              Invocation.getter(#matchesCubit),
            ),
          )
          as _i23.MatchesCubit);

  @override
  _i8.ToasterService get toasterService =>
      (super.noSuchMethod(
            Invocation.getter(#toasterService),
            returnValue: _FakeToasterService_6(
              this,
              Invocation.getter(#toasterService),
            ),
            returnValueForMissingStub: _FakeToasterService_6(
              this,
              Invocation.getter(#toasterService),
            ),
          )
          as _i8.ToasterService);

  @override
  _i24.ExcelService get excelService =>
      (super.noSuchMethod(
            Invocation.getter(#excelService),
            returnValue: _FakeExcelService_22(
              this,
              Invocation.getter(#excelService),
            ),
            returnValueForMissingStub: _FakeExcelService_22(
              this,
              Invocation.getter(#excelService),
            ),
          )
          as _i24.ExcelService);

  @override
  _i12.AnalyticsService get analyticsService =>
      (super.noSuchMethod(
            Invocation.getter(#analyticsService),
            returnValue: _FakeAnalyticsService_10(
              this,
              Invocation.getter(#analyticsService),
            ),
            returnValueForMissingStub: _FakeAnalyticsService_10(
              this,
              Invocation.getter(#analyticsService),
            ),
          )
          as _i12.AnalyticsService);

  @override
  _i25.MatchState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeMatchState_23(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeMatchState_23(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i25.MatchState);

  @override
  _i28.Stream<_i25.MatchState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i28.Stream<_i25.MatchState>.empty(),
            returnValueForMissingStub: _i28.Stream<_i25.MatchState>.empty(),
          )
          as _i28.Stream<_i25.MatchState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i28.Future<void> initialize(
    int? id, {
    int? improvisationId,
    int? durationIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [id],
              {
                #improvisationId: improvisationId,
                #durationIndex: durationIndex,
              },
            ),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> edit(_i14.MatchModel? match) =>
      (super.noSuchMethod(
            Invocation.method(#edit, [match]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> addImprovisation(
    _i38.ImprovisationModel? improvisation,
    int? index,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addImprovisation, [improvisation, index]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> editImprovisation(
    _i38.ImprovisationModel? improvisation,
    int? index,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#editImprovisation, [improvisation, index]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> removeImprovisation(
    _i38.ImprovisationModel? improvisation,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeImprovisation, [improvisation]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  void changePage(int? page) => super.noSuchMethod(
    Invocation.method(#changePage, [page]),
    returnValueForMissingStub: null,
  );

  @override
  void changeDuration(int? durationIndex) => super.noSuchMethod(
    Invocation.method(#changeDuration, [durationIndex]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> setPoint(int? improvisationId, int? teamId, int? value) =>
      (super.noSuchMethod(
            Invocation.method(#setPoint, [improvisationId, teamId, value]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> addPenalty(_i40.PenaltyModel? penalty) =>
      (super.noSuchMethod(
            Invocation.method(#addPenalty, [penalty]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> editPenalty(_i40.PenaltyModel? penalty) =>
      (super.noSuchMethod(
            Invocation.method(#editPenalty, [penalty]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> removePenalty(int? penaltyId) =>
      (super.noSuchMethod(
            Invocation.method(#removePenalty, [penaltyId]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> addStar() =>
      (super.noSuchMethod(
            Invocation.method(#addStar, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> editStar(_i41.StarModel? star) =>
      (super.noSuchMethod(
            Invocation.method(#editStar, [star]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> removeStar(_i41.StarModel? star) =>
      (super.noSuchMethod(
            Invocation.method(#removeStar, [star]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<void> moveStar(int? oldIndex, int? newIndex) =>
      (super.noSuchMethod(
            Invocation.method(#moveStar, [oldIndex, newIndex]),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);

  @override
  _i28.Future<bool> exportExcel() =>
      (super.noSuchMethod(
            Invocation.method(#exportExcel, []),
            returnValue: _i28.Future<bool>.value(false),
            returnValueForMissingStub: _i28.Future<bool>.value(false),
          )
          as _i28.Future<bool>);

  @override
  void emit(_i25.MatchState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i33.Change<_i25.MatchState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i28.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i28.Future<void>.value(),
            returnValueForMissingStub: _i28.Future<void>.value(),
          )
          as _i28.Future<void>);
}
