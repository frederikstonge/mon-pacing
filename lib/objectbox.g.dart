// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'models/entities/duration_entity_model.dart';
import 'models/entities/improvisation_entity_model.dart';
import 'models/entities/match_entity_model.dart';
import 'models/entities/pacing_entity_model.dart';
import 'models/entities/penalty_entity_model.dart';
import 'models/entities/point_entity_model.dart';
import 'models/entities/team_entity_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8914607900243138768),
      name: 'ImprovisationEntityModel',
      lastPropertyId: const obx_int.IdUid(13, 5609030383979502710),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3117701101401553046),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2398888621869490011),
            name: 'category',
            type: 9,
            flags: 8,
            indexId: const obx_int.IdUid(1, 2122003198354024666)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7564667562157563041),
            name: 'theme',
            type: 9,
            flags: 8,
            indexId: const obx_int.IdUid(2, 6395375526733635240)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3159391340129517827),
            name: 'performers',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6453554132006712815),
            name: 'notes',
            type: 9,
            flags: 8,
            indexId: const obx_int.IdUid(3, 3368114024170850700)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2349662434354150040),
            name: 'type',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3130543207458000461),
            name: 'timeBufferId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 432671548468845201),
            relationTarget: 'DurationEntityModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5609030383979502710),
            name: 'huddleTimerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 5977630624184484134),
            relationTarget: 'DurationEntityModel')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 4335433331722211646),
            name: 'durations',
            targetId: const obx_int.IdUid(2, 1489243300379573623))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1489243300379573623),
      name: 'DurationEntityModel',
      lastPropertyId: const obx_int.IdUid(4, 2662620539167294471),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3932507240510649338),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8793924553072343553),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7074055300620186114),
            name: 'modifiedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2662620539167294471),
            name: 'durationInSeconds',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5906246021334358872),
      name: 'PenaltyEntityModel',
      lastPropertyId: const obx_int.IdUid(8, 6752668424207716573),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3272644439606059522),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1337962594594493009),
            name: 'major',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9190026604264138351),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5481684287904550538),
            name: 'performer',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3334217244485576348),
            name: 'teamId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6752668424207716573),
            name: 'improvisationId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3319381071288449821),
      name: 'PointEntityModel',
      lastPropertyId: const obx_int.IdUid(6, 8031417781075583715),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4188330149373707241),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6666184671137137373),
            name: 'teamId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3545528426188780479),
            name: 'improvisationId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8031417781075583715),
            name: 'value',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 4271602385428364471),
      name: 'TeamEntityModel',
      lastPropertyId: const obx_int.IdUid(5, 3529359524545972799),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8646497019152405054),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5442795310964879505),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3529359524545972799),
            name: 'color',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 8929856911640017933),
      name: 'MatchEntityModel',
      lastPropertyId: const obx_int.IdUid(7, 1261302864208010568),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 878969476734533241),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6021016290077953270),
            name: 'createdDate',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(6, 6486354849065329154)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2203636915164371176),
            name: 'modifiedDate',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(7, 1456309799862639749)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1747032072527755774),
            name: 'name',
            type: 9,
            flags: 8,
            indexId: const obx_int.IdUid(8, 2658494162385683945)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8174789409349348733),
            name: 'enablePenaltiesImpactPoints',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5118917127053205944),
            name: 'penaltiesImpactType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1261302864208010568),
            name: 'penaltiesRequiredToImpactPoints',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 6510061847270632051),
            name: 'improvisations',
            targetId: const obx_int.IdUid(1, 8914607900243138768)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 8830045624412587589),
            name: 'teams',
            targetId: const obx_int.IdUid(5, 4271602385428364471)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 3910597622604587346),
            name: 'penalties',
            targetId: const obx_int.IdUid(3, 5906246021334358872)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(5, 5524940104923030729),
            name: 'points',
            targetId: const obx_int.IdUid(4, 3319381071288449821))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 4479497672813572538),
      name: 'PacingEntityModel',
      lastPropertyId: const obx_int.IdUid(5, 1026035684906517907),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3575499540990970638),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5344798503133286712),
            name: 'createdDate',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(9, 4504118641178305882)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3095661558979648766),
            name: 'modifiedDate',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(10, 5233006772204919081)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6415873581400012360),
            name: 'name',
            type: 9,
            flags: 8,
            indexId: const obx_int.IdUid(11, 5714752445595325751)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1026035684906517907),
            name: 'defaultNumberOfTeams',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(6, 5542827067799863848),
            name: 'improvisations',
            targetId: const obx_int.IdUid(1, 8914607900243138768))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) {
  return obx.Store(getObjectBoxModel(),
      directory: directory,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 4479497672813572538),
      lastIndexId: const obx_int.IdUid(11, 5714752445595325751),
      lastRelationId: const obx_int.IdUid(6, 5542827067799863848),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        4289033690076171076,
        7835396717960053853,
        7144344542896103951,
        3820478307473349613,
        844023223591610288,
        8455124917036302612,
        6638289729991681444,
        3408745059806097945,
        2248899038727762277,
        8114421501588075415,
        2318498905215491722
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ImprovisationEntityModel: obx_int.EntityDefinition<
            ImprovisationEntityModel>(
        model: _entities[0],
        toOneRelations: (ImprovisationEntityModel object) =>
            [object.timeBuffer, object.huddleTimer],
        toManyRelations: (ImprovisationEntityModel object) => {
              obx_int.RelInfo<ImprovisationEntityModel>.toMany(1, object.id):
                  object.durations
            },
        getId: (ImprovisationEntityModel object) => object.id,
        setId: (ImprovisationEntityModel object, int id) {
          object.id = id;
        },
        objectToFB: (ImprovisationEntityModel object, fb.Builder fbb) {
          final categoryOffset = fbb.writeString(object.category);
          final themeOffset = fbb.writeString(object.theme);
          final performersOffset = fbb.writeString(object.performers);
          final notesOffset = fbb.writeString(object.notes);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(3, categoryOffset);
          fbb.addOffset(4, themeOffset);
          fbb.addOffset(6, performersOffset);
          fbb.addOffset(7, notesOffset);
          fbb.addInt64(10, object.type);
          fbb.addInt64(11, object.timeBuffer.targetId);
          fbb.addInt64(12, object.huddleTimer.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final typeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final themeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final durationsParam = obx.ToMany<DurationEntityModel>();
          final performersParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final timeBufferParam = obx.ToOne<DurationEntityModel>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0));
          final huddleTimerParam = obx.ToOne<DurationEntityModel>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0));
          final object = ImprovisationEntityModel(
              id: idParam,
              type: typeParam,
              category: categoryParam,
              theme: themeParam,
              durations: durationsParam,
              performers: performersParam,
              notes: notesParam,
              timeBuffer: timeBufferParam,
              huddleTimer: huddleTimerParam);
          object.timeBuffer.attach(store);
          object.huddleTimer.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<ImprovisationEntityModel>(
              object.durations,
              store,
              obx_int.RelInfo<ImprovisationEntityModel>.toMany(1, object.id));
          return object;
        }),
    DurationEntityModel: obx_int.EntityDefinition<DurationEntityModel>(
        model: _entities[1],
        toOneRelations: (DurationEntityModel object) => [],
        toManyRelations: (DurationEntityModel object) => {},
        getId: (DurationEntityModel object) => object.id,
        setId: (DurationEntityModel object, int id) {
          object.id = id;
        },
        objectToFB: (DurationEntityModel object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.createdDate?.millisecondsSinceEpoch);
          fbb.addInt64(2, object.modifiedDate?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.durationInSeconds);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final modifiedDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final durationInSecondsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = DurationEntityModel(
              id: idParam, durationInSeconds: durationInSecondsParam)
            ..createdDate = createdDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdDateValue)
            ..modifiedDate = modifiedDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(modifiedDateValue);

          return object;
        }),
    PenaltyEntityModel: obx_int.EntityDefinition<PenaltyEntityModel>(
        model: _entities[2],
        toOneRelations: (PenaltyEntityModel object) => [],
        toManyRelations: (PenaltyEntityModel object) => {},
        getId: (PenaltyEntityModel object) => object.id,
        setId: (PenaltyEntityModel object, int id) {
          object.id = id;
        },
        objectToFB: (PenaltyEntityModel object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final performerOffset = fbb.writeString(object.performer);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addBool(3, object.major);
          fbb.addOffset(4, typeOffset);
          fbb.addOffset(5, performerOffset);
          fbb.addInt64(6, object.teamId);
          fbb.addInt64(7, object.improvisationId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final majorParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final performerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final teamIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final improvisationIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = PenaltyEntityModel(
              id: idParam,
              type: typeParam,
              major: majorParam,
              performer: performerParam,
              teamId: teamIdParam,
              improvisationId: improvisationIdParam);

          return object;
        }),
    PointEntityModel: obx_int.EntityDefinition<PointEntityModel>(
        model: _entities[3],
        toOneRelations: (PointEntityModel object) => [],
        toManyRelations: (PointEntityModel object) => {},
        getId: (PointEntityModel object) => object.id,
        setId: (PointEntityModel object, int id) {
          object.id = id;
        },
        objectToFB: (PointEntityModel object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(3, object.teamId);
          fbb.addInt64(4, object.improvisationId);
          fbb.addInt64(5, object.value);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final teamIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final improvisationIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final valueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = PointEntityModel(
              id: idParam,
              teamId: teamIdParam,
              improvisationId: improvisationIdParam,
              value: valueParam);

          return object;
        }),
    TeamEntityModel: obx_int.EntityDefinition<TeamEntityModel>(
        model: _entities[4],
        toOneRelations: (TeamEntityModel object) => [],
        toManyRelations: (TeamEntityModel object) => {},
        getId: (TeamEntityModel object) => object.id,
        setId: (TeamEntityModel object, int id) {
          object.id = id;
        },
        objectToFB: (TeamEntityModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.color);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final colorParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object =
              TeamEntityModel(id: idParam, name: nameParam, color: colorParam);

          return object;
        }),
    MatchEntityModel: obx_int.EntityDefinition<MatchEntityModel>(
        model: _entities[5],
        toOneRelations: (MatchEntityModel object) => [],
        toManyRelations: (MatchEntityModel object) => {
              obx_int.RelInfo<MatchEntityModel>.toMany(2, object.id):
                  object.improvisations,
              obx_int.RelInfo<MatchEntityModel>.toMany(3, object.id):
                  object.teams,
              obx_int.RelInfo<MatchEntityModel>.toMany(4, object.id):
                  object.penalties,
              obx_int.RelInfo<MatchEntityModel>.toMany(5, object.id):
                  object.points
            },
        getId: (MatchEntityModel object) => object.id,
        setId: (MatchEntityModel object, int id) {
          object.id = id;
        },
        objectToFB: (MatchEntityModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.createdDate?.millisecondsSinceEpoch);
          fbb.addInt64(2, object.modifiedDate?.millisecondsSinceEpoch);
          fbb.addOffset(3, nameOffset);
          fbb.addBool(4, object.enablePenaltiesImpactPoints);
          fbb.addInt64(5, object.penaltiesImpactType);
          fbb.addInt64(6, object.penaltiesRequiredToImpactPoints);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final modifiedDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final improvisationsParam = obx.ToMany<ImprovisationEntityModel>();
          final teamsParam = obx.ToMany<TeamEntityModel>();
          final penaltiesParam = obx.ToMany<PenaltyEntityModel>();
          final pointsParam = obx.ToMany<PointEntityModel>();
          final enablePenaltiesImpactPointsParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final penaltiesImpactTypeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final penaltiesRequiredToImpactPointsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = MatchEntityModel(
              id: idParam,
              name: nameParam,
              improvisations: improvisationsParam,
              teams: teamsParam,
              penalties: penaltiesParam,
              points: pointsParam,
              enablePenaltiesImpactPoints: enablePenaltiesImpactPointsParam,
              penaltiesImpactType: penaltiesImpactTypeParam,
              penaltiesRequiredToImpactPoints:
                  penaltiesRequiredToImpactPointsParam)
            ..createdDate = createdDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdDateValue)
            ..modifiedDate = modifiedDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(modifiedDateValue);
          obx_int.InternalToManyAccess.setRelInfo<MatchEntityModel>(
              object.improvisations,
              store,
              obx_int.RelInfo<MatchEntityModel>.toMany(2, object.id));
          obx_int.InternalToManyAccess.setRelInfo<MatchEntityModel>(
              object.teams,
              store,
              obx_int.RelInfo<MatchEntityModel>.toMany(3, object.id));
          obx_int.InternalToManyAccess.setRelInfo<MatchEntityModel>(
              object.penalties,
              store,
              obx_int.RelInfo<MatchEntityModel>.toMany(4, object.id));
          obx_int.InternalToManyAccess.setRelInfo<MatchEntityModel>(
              object.points,
              store,
              obx_int.RelInfo<MatchEntityModel>.toMany(5, object.id));
          return object;
        }),
    PacingEntityModel: obx_int.EntityDefinition<PacingEntityModel>(
        model: _entities[6],
        toOneRelations: (PacingEntityModel object) => [],
        toManyRelations: (PacingEntityModel object) => {
              obx_int.RelInfo<PacingEntityModel>.toMany(6, object.id):
                  object.improvisations
            },
        getId: (PacingEntityModel object) => object.id,
        setId: (PacingEntityModel object, int id) {
          object.id = id;
        },
        objectToFB: (PacingEntityModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.createdDate?.millisecondsSinceEpoch);
          fbb.addInt64(2, object.modifiedDate?.millisecondsSinceEpoch);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.defaultNumberOfTeams);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final modifiedDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final improvisationsParam = obx.ToMany<ImprovisationEntityModel>();
          final defaultNumberOfTeamsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = PacingEntityModel(
              id: idParam,
              name: nameParam,
              improvisations: improvisationsParam,
              defaultNumberOfTeams: defaultNumberOfTeamsParam)
            ..createdDate = createdDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdDateValue)
            ..modifiedDate = modifiedDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(modifiedDateValue);
          obx_int.InternalToManyAccess.setRelInfo<PacingEntityModel>(
              object.improvisations,
              store,
              obx_int.RelInfo<PacingEntityModel>.toMany(6, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ImprovisationEntityModel] entity fields to define ObjectBox queries.
class ImprovisationEntityModel_ {
  /// see [ImprovisationEntityModel.id]
  static final id = obx.QueryIntegerProperty<ImprovisationEntityModel>(
      _entities[0].properties[0]);

  /// see [ImprovisationEntityModel.category]
  static final category = obx.QueryStringProperty<ImprovisationEntityModel>(
      _entities[0].properties[1]);

  /// see [ImprovisationEntityModel.theme]
  static final theme = obx.QueryStringProperty<ImprovisationEntityModel>(
      _entities[0].properties[2]);

  /// see [ImprovisationEntityModel.performers]
  static final performers = obx.QueryStringProperty<ImprovisationEntityModel>(
      _entities[0].properties[3]);

  /// see [ImprovisationEntityModel.notes]
  static final notes = obx.QueryStringProperty<ImprovisationEntityModel>(
      _entities[0].properties[4]);

  /// see [ImprovisationEntityModel.type]
  static final type = obx.QueryIntegerProperty<ImprovisationEntityModel>(
      _entities[0].properties[5]);

  /// see [ImprovisationEntityModel.timeBuffer]
  static final timeBuffer =
      obx.QueryRelationToOne<ImprovisationEntityModel, DurationEntityModel>(
          _entities[0].properties[6]);

  /// see [ImprovisationEntityModel.huddleTimer]
  static final huddleTimer =
      obx.QueryRelationToOne<ImprovisationEntityModel, DurationEntityModel>(
          _entities[0].properties[7]);

  /// see [ImprovisationEntityModel.durations]
  static final durations =
      obx.QueryRelationToMany<ImprovisationEntityModel, DurationEntityModel>(
          _entities[0].relations[0]);
}

/// [DurationEntityModel] entity fields to define ObjectBox queries.
class DurationEntityModel_ {
  /// see [DurationEntityModel.id]
  static final id =
      obx.QueryIntegerProperty<DurationEntityModel>(_entities[1].properties[0]);

  /// see [DurationEntityModel.createdDate]
  static final createdDate =
      obx.QueryDateProperty<DurationEntityModel>(_entities[1].properties[1]);

  /// see [DurationEntityModel.modifiedDate]
  static final modifiedDate =
      obx.QueryDateProperty<DurationEntityModel>(_entities[1].properties[2]);

  /// see [DurationEntityModel.durationInSeconds]
  static final durationInSeconds =
      obx.QueryIntegerProperty<DurationEntityModel>(_entities[1].properties[3]);
}

/// [PenaltyEntityModel] entity fields to define ObjectBox queries.
class PenaltyEntityModel_ {
  /// see [PenaltyEntityModel.id]
  static final id =
      obx.QueryIntegerProperty<PenaltyEntityModel>(_entities[2].properties[0]);

  /// see [PenaltyEntityModel.major]
  static final major =
      obx.QueryBooleanProperty<PenaltyEntityModel>(_entities[2].properties[1]);

  /// see [PenaltyEntityModel.type]
  static final type =
      obx.QueryStringProperty<PenaltyEntityModel>(_entities[2].properties[2]);

  /// see [PenaltyEntityModel.performer]
  static final performer =
      obx.QueryStringProperty<PenaltyEntityModel>(_entities[2].properties[3]);

  /// see [PenaltyEntityModel.teamId]
  static final teamId =
      obx.QueryIntegerProperty<PenaltyEntityModel>(_entities[2].properties[4]);

  /// see [PenaltyEntityModel.improvisationId]
  static final improvisationId =
      obx.QueryIntegerProperty<PenaltyEntityModel>(_entities[2].properties[5]);
}

/// [PointEntityModel] entity fields to define ObjectBox queries.
class PointEntityModel_ {
  /// see [PointEntityModel.id]
  static final id =
      obx.QueryIntegerProperty<PointEntityModel>(_entities[3].properties[0]);

  /// see [PointEntityModel.teamId]
  static final teamId =
      obx.QueryIntegerProperty<PointEntityModel>(_entities[3].properties[1]);

  /// see [PointEntityModel.improvisationId]
  static final improvisationId =
      obx.QueryIntegerProperty<PointEntityModel>(_entities[3].properties[2]);

  /// see [PointEntityModel.value]
  static final value =
      obx.QueryIntegerProperty<PointEntityModel>(_entities[3].properties[3]);
}

/// [TeamEntityModel] entity fields to define ObjectBox queries.
class TeamEntityModel_ {
  /// see [TeamEntityModel.id]
  static final id =
      obx.QueryIntegerProperty<TeamEntityModel>(_entities[4].properties[0]);

  /// see [TeamEntityModel.name]
  static final name =
      obx.QueryStringProperty<TeamEntityModel>(_entities[4].properties[1]);

  /// see [TeamEntityModel.color]
  static final color =
      obx.QueryIntegerProperty<TeamEntityModel>(_entities[4].properties[2]);
}

/// [MatchEntityModel] entity fields to define ObjectBox queries.
class MatchEntityModel_ {
  /// see [MatchEntityModel.id]
  static final id =
      obx.QueryIntegerProperty<MatchEntityModel>(_entities[5].properties[0]);

  /// see [MatchEntityModel.createdDate]
  static final createdDate =
      obx.QueryDateProperty<MatchEntityModel>(_entities[5].properties[1]);

  /// see [MatchEntityModel.modifiedDate]
  static final modifiedDate =
      obx.QueryDateProperty<MatchEntityModel>(_entities[5].properties[2]);

  /// see [MatchEntityModel.name]
  static final name =
      obx.QueryStringProperty<MatchEntityModel>(_entities[5].properties[3]);

  /// see [MatchEntityModel.enablePenaltiesImpactPoints]
  static final enablePenaltiesImpactPoints =
      obx.QueryBooleanProperty<MatchEntityModel>(_entities[5].properties[4]);

  /// see [MatchEntityModel.penaltiesImpactType]
  static final penaltiesImpactType =
      obx.QueryIntegerProperty<MatchEntityModel>(_entities[5].properties[5]);

  /// see [MatchEntityModel.penaltiesRequiredToImpactPoints]
  static final penaltiesRequiredToImpactPoints =
      obx.QueryIntegerProperty<MatchEntityModel>(_entities[5].properties[6]);

  /// see [MatchEntityModel.improvisations]
  static final improvisations =
      obx.QueryRelationToMany<MatchEntityModel, ImprovisationEntityModel>(
          _entities[5].relations[0]);

  /// see [MatchEntityModel.teams]
  static final teams =
      obx.QueryRelationToMany<MatchEntityModel, TeamEntityModel>(
          _entities[5].relations[1]);

  /// see [MatchEntityModel.penalties]
  static final penalties =
      obx.QueryRelationToMany<MatchEntityModel, PenaltyEntityModel>(
          _entities[5].relations[2]);

  /// see [MatchEntityModel.points]
  static final points =
      obx.QueryRelationToMany<MatchEntityModel, PointEntityModel>(
          _entities[5].relations[3]);
}

/// [PacingEntityModel] entity fields to define ObjectBox queries.
class PacingEntityModel_ {
  /// see [PacingEntityModel.id]
  static final id =
      obx.QueryIntegerProperty<PacingEntityModel>(_entities[6].properties[0]);

  /// see [PacingEntityModel.createdDate]
  static final createdDate =
      obx.QueryDateProperty<PacingEntityModel>(_entities[6].properties[1]);

  /// see [PacingEntityModel.modifiedDate]
  static final modifiedDate =
      obx.QueryDateProperty<PacingEntityModel>(_entities[6].properties[2]);

  /// see [PacingEntityModel.name]
  static final name =
      obx.QueryStringProperty<PacingEntityModel>(_entities[6].properties[3]);

  /// see [PacingEntityModel.defaultNumberOfTeams]
  static final defaultNumberOfTeams =
      obx.QueryIntegerProperty<PacingEntityModel>(_entities[6].properties[4]);

  /// see [PacingEntityModel.improvisations]
  static final improvisations =
      obx.QueryRelationToMany<PacingEntityModel, ImprovisationEntityModel>(
          _entities[6].relations[0]);
}
