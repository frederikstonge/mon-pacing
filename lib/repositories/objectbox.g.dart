// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../repositories/entities/improvisation_entity.dart';
import '../repositories/entities/match_entity.dart';
import '../repositories/entities/pacing_entity.dart';
import '../repositories/entities/penalty_entity.dart';
import '../repositories/entities/performer_entity.dart';
import '../repositories/entities/point_entity.dart';
import '../repositories/entities/star_entity.dart';
import '../repositories/entities/tag_entity.dart';
import '../repositories/entities/team_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 322570116326816951),
      name: 'ImprovisationEntity',
      lastPropertyId: const obx_int.IdUid(12, 6240579054792186524),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9056625881886411201),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4994945093318230926),
            name: 'type',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4497004811548909160),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4442167088373510978),
            name: 'theme',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7033490250729107356),
            name: 'durationsInSeconds',
            type: 26,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7422227513861959715),
            name: 'performers',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 736620599525807532),
            name: 'notes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7500701746478729358),
            name: 'timeBufferInSeconds',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6768372174801939271),
            name: 'huddleTimerInSeconds',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4217711522733925619),
            name: 'integrationEntityId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8003889064682703545),
            name: 'integrationAdditionalData',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6240579054792186524),
            name: 'order',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7328884561935232436),
      name: 'MatchEntity',
      lastPropertyId: const obx_int.IdUid(18, 7018269910061947127),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2303067646539866510),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5516770688275614507),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(1, 1646742984042689732)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4184708754185190465),
            name: 'createdDate',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(2, 2009402952773878945)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8324338364882068729),
            name: 'modifiedDate',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(3, 3142194564816153360)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4901305156597532926),
            name: 'enableStatistics',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5624565393469317930),
            name: 'enablePenaltiesImpactPoints',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6351867129398669673),
            name: 'penaltiesImpactType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3332352743735094519),
            name: 'penaltiesRequiredToImpactPoints',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 215756073322132817),
            name: 'enableMatchExpulsion',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 9124192746152216091),
            name: 'penaltiesRequiredToExpel',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3816322584372286747),
            name: 'integrationId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3796472972914092440),
            name: 'integrationEntityId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 3437336032303109720),
            name: 'integrationAdditionalData',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1994226352184633381),
            name: 'integrationRestrictMaximumPointPerImprovisation',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 1550223078012945261),
            name: 'integrationMinNumberOfImprovisations',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 6040221050144242742),
            name: 'integrationMaxNumberOfImprovisations',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 7018269910061947127),
            name: 'integrationPenaltyTypes',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 9080573965794852406),
            name: 'teams',
            targetId: const obx_int.IdUid(9, 1216612997671907182)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 6415516565511235961),
            name: 'improvisations',
            targetId: const obx_int.IdUid(1, 322570116326816951)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 8389619607669470009),
            name: 'penalties',
            targetId: const obx_int.IdUid(5, 8822958598216247929)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(4, 3976113794471059549),
            name: 'points',
            targetId: const obx_int.IdUid(7, 8160220251486354996)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(5, 1213309736984790490),
            name: 'stars',
            targetId: const obx_int.IdUid(8, 5250281909069223402)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(9, 6289240599779535091),
            name: 'tags',
            targetId: const obx_int.IdUid(10, 8924922073151694957))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6478441924384550944),
      name: 'PacingEntity',
      lastPropertyId: const obx_int.IdUid(9, 546984585718803573),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2354479495942673252),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6258525721187423298),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(4, 5866725619791752888)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 241551240926916014),
            name: 'createdDate',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(5, 4469871673128234004)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8447262298109647017),
            name: 'modifiedDate',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(6, 2130685676772419882)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2275169376802674394),
            name: 'defaultNumberOfTeams',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1809786271860451083),
            name: 'integrationId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4649304977298507640),
            name: 'integrationEntityId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 546984585718803573),
            name: 'integrationAdditionalData',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(7, 384961368069841651),
            name: 'improvisations',
            targetId: const obx_int.IdUid(1, 322570116326816951)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(10, 2481712446099865321),
            name: 'tags',
            targetId: const obx_int.IdUid(10, 8924922073151694957))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 8822958598216247929),
      name: 'PenaltyEntity',
      lastPropertyId: const obx_int.IdUid(6, 7726242346064950081),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 597011134482559492),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1515085888001667147),
            name: 'major',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1141834237955725050),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3026213282741371141),
            name: 'performerId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 582594390606667372),
            name: 'teamId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7726242346064950081),
            name: 'improvisationId',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 7048654271457101854),
      name: 'PerformerEntity',
      lastPropertyId: const obx_int.IdUid(5, 1878360138895613792),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2805515896506849216),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5943074421434375387),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5914449017887231312),
            name: 'integrationEntityId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6114869884479456570),
            name: 'integrationAdditionalData',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1878360138895613792),
            name: 'order',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 8160220251486354996),
      name: 'PointEntity',
      lastPropertyId: const obx_int.IdUid(4, 1358822669887476775),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7545545922952997639),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7634804161117842844),
            name: 'teamId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4789373274606105561),
            name: 'improvisationId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1358822669887476775),
            name: 'value',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 5250281909069223402),
      name: 'StarEntity',
      lastPropertyId: const obx_int.IdUid(4, 4410339759004335565),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 200077920491567239),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1824075814684445393),
            name: 'performerId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4230611530197114102),
            name: 'teamId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4410339759004335565),
            name: 'order',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 1216612997671907182),
      name: 'TeamEntity',
      lastPropertyId: const obx_int.IdUid(9, 2515836592902002615),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7923632638318746580),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3641444878694280248),
            name: 'createdDate',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(7, 7830246398594317574)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 284333528890798456),
            name: 'modifiedDate',
            type: 10,
            flags: 8,
            indexId: const obx_int.IdUid(8, 614793472646342048)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5709037896038401524),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(9, 6744930328974076098)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7928582043082141515),
            name: 'color',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2925872941265532207),
            name: 'integrationEntityId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6778898514959522071),
            name: 'integrationAdditionalData',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2515836592902002615),
            name: 'hasMatch',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(8, 3894096562731266678),
            name: 'performers',
            targetId: const obx_int.IdUid(6, 7048654271457101854)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(11, 1703212796788486032),
            name: 'tags',
            targetId: const obx_int.IdUid(10, 8924922073151694957))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 8924922073151694957),
      name: 'TagEntity',
      lastPropertyId: const obx_int.IdUid(2, 6078287050412527923),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5569215778462863645),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6078287050412527923),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(10, 8924922073151694957),
      lastIndexId: const obx_int.IdUid(9, 6744930328974076098),
      lastRelationId: const obx_int.IdUid(11, 1703212796788486032),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [1320290470514103811],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        3146358308400614885,
        6958582708582395732,
        7387814731336651217,
        1247100399648396342,
        6599612206698723775,
        1472699283272810640,
        4337454576444043536,
        4968754909771031518
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ImprovisationEntity: obx_int.EntityDefinition<ImprovisationEntity>(
        model: _entities[0],
        toOneRelations: (ImprovisationEntity object) => [],
        toManyRelations: (ImprovisationEntity object) => {},
        getId: (ImprovisationEntity object) => object.id,
        setId: (ImprovisationEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ImprovisationEntity object, fb.Builder fbb) {
          final categoryOffset = fbb.writeString(object.category);
          final themeOffset = fbb.writeString(object.theme);
          final durationsInSecondsOffset =
              fbb.writeListInt32(object.durationsInSeconds);
          final performersOffset = fbb.writeString(object.performers);
          final notesOffset = fbb.writeString(object.notes);
          final integrationEntityIdOffset = object.integrationEntityId == null
              ? null
              : fbb.writeString(object.integrationEntityId!);
          final integrationAdditionalDataOffset =
              object.integrationAdditionalData == null
                  ? null
                  : fbb.writeString(object.integrationAdditionalData!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.type);
          fbb.addOffset(2, categoryOffset);
          fbb.addOffset(3, themeOffset);
          fbb.addOffset(4, durationsInSecondsOffset);
          fbb.addOffset(5, performersOffset);
          fbb.addOffset(6, notesOffset);
          fbb.addInt64(7, object.timeBufferInSeconds);
          fbb.addInt64(8, object.huddleTimerInSeconds);
          fbb.addOffset(9, integrationEntityIdOffset);
          fbb.addOffset(10, integrationAdditionalDataOffset);
          fbb.addInt64(11, object.order);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final orderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final typeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final themeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final durationsInSecondsParam =
              const fb.ListReader<int>(fb.Int32Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 12, []);
          final performersParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final timeBufferInSecondsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final huddleTimerInSecondsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final integrationEntityIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final integrationAdditionalDataParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final object = ImprovisationEntity(
              id: idParam,
              order: orderParam,
              type: typeParam,
              category: categoryParam,
              theme: themeParam,
              durationsInSeconds: durationsInSecondsParam,
              performers: performersParam,
              notes: notesParam,
              timeBufferInSeconds: timeBufferInSecondsParam,
              huddleTimerInSeconds: huddleTimerInSecondsParam,
              integrationEntityId: integrationEntityIdParam,
              integrationAdditionalData: integrationAdditionalDataParam);

          return object;
        }),
    MatchEntity: obx_int.EntityDefinition<MatchEntity>(
        model: _entities[1],
        toOneRelations: (MatchEntity object) => [],
        toManyRelations: (MatchEntity object) => {
              obx_int.RelInfo<MatchEntity>.toMany(1, object.id): object.teams,
              obx_int.RelInfo<MatchEntity>.toMany(2, object.id):
                  object.improvisations,
              obx_int.RelInfo<MatchEntity>.toMany(3, object.id):
                  object.penalties,
              obx_int.RelInfo<MatchEntity>.toMany(4, object.id): object.points,
              obx_int.RelInfo<MatchEntity>.toMany(5, object.id): object.stars,
              obx_int.RelInfo<MatchEntity>.toMany(9, object.id): object.tags
            },
        getId: (MatchEntity object) => object.id,
        setId: (MatchEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MatchEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final integrationIdOffset = object.integrationId == null
              ? null
              : fbb.writeString(object.integrationId!);
          final integrationEntityIdOffset = object.integrationEntityId == null
              ? null
              : fbb.writeString(object.integrationEntityId!);
          final integrationAdditionalDataOffset =
              object.integrationAdditionalData == null
                  ? null
                  : fbb.writeString(object.integrationAdditionalData!);
          final integrationPenaltyTypesOffset =
              object.integrationPenaltyTypes == null
                  ? null
                  : fbb.writeList(object.integrationPenaltyTypes!
                      .map(fbb.writeString)
                      .toList(growable: false));
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.createdDate?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.modifiedDate?.millisecondsSinceEpoch);
          fbb.addBool(5, object.enableStatistics);
          fbb.addBool(6, object.enablePenaltiesImpactPoints);
          fbb.addInt64(7, object.penaltiesImpactType);
          fbb.addInt64(8, object.penaltiesRequiredToImpactPoints);
          fbb.addBool(9, object.enableMatchExpulsion);
          fbb.addInt64(10, object.penaltiesRequiredToExpel);
          fbb.addOffset(11, integrationIdOffset);
          fbb.addOffset(12, integrationEntityIdOffset);
          fbb.addOffset(13, integrationAdditionalDataOffset);
          fbb.addInt64(
              14, object.integrationRestrictMaximumPointPerImprovisation);
          fbb.addInt64(15, object.integrationMinNumberOfImprovisations);
          fbb.addInt64(16, object.integrationMaxNumberOfImprovisations);
          fbb.addOffset(17, integrationPenaltyTypesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final modifiedDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final enableMatchExpulsionParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final enablePenaltiesImpactPointsParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final enableStatisticsParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final penaltiesImpactTypeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final penaltiesRequiredToExpelParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final penaltiesRequiredToImpactPointsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final createdDateParam = createdDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdDateValue);
          final modifiedDateParam = modifiedDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(modifiedDateValue);
          final integrationIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final integrationEntityIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28);
          final integrationAdditionalDataParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 30);
          final integrationRestrictMaximumPointPerImprovisationParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32);
          final integrationMinNumberOfImprovisationsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34);
          final integrationMaxNumberOfImprovisationsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 36);
          final integrationPenaltyTypesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 38);
          final object = MatchEntity(
              id: idParam,
              name: nameParam,
              enableMatchExpulsion: enableMatchExpulsionParam,
              enablePenaltiesImpactPoints: enablePenaltiesImpactPointsParam,
              enableStatistics: enableStatisticsParam,
              penaltiesImpactType: penaltiesImpactTypeParam,
              penaltiesRequiredToExpel: penaltiesRequiredToExpelParam,
              penaltiesRequiredToImpactPoints:
                  penaltiesRequiredToImpactPointsParam,
              createdDate: createdDateParam,
              modifiedDate: modifiedDateParam,
              integrationId: integrationIdParam,
              integrationEntityId: integrationEntityIdParam,
              integrationAdditionalData: integrationAdditionalDataParam,
              integrationRestrictMaximumPointPerImprovisation:
                  integrationRestrictMaximumPointPerImprovisationParam,
              integrationMinNumberOfImprovisations:
                  integrationMinNumberOfImprovisationsParam,
              integrationMaxNumberOfImprovisations:
                  integrationMaxNumberOfImprovisationsParam,
              integrationPenaltyTypes: integrationPenaltyTypesParam);
          obx_int.InternalToManyAccess.setRelInfo<MatchEntity>(object.teams,
              store, obx_int.RelInfo<MatchEntity>.toMany(1, object.id));
          obx_int.InternalToManyAccess.setRelInfo<MatchEntity>(
              object.improvisations,
              store,
              obx_int.RelInfo<MatchEntity>.toMany(2, object.id));
          obx_int.InternalToManyAccess.setRelInfo<MatchEntity>(object.penalties,
              store, obx_int.RelInfo<MatchEntity>.toMany(3, object.id));
          obx_int.InternalToManyAccess.setRelInfo<MatchEntity>(object.points,
              store, obx_int.RelInfo<MatchEntity>.toMany(4, object.id));
          obx_int.InternalToManyAccess.setRelInfo<MatchEntity>(object.stars,
              store, obx_int.RelInfo<MatchEntity>.toMany(5, object.id));
          obx_int.InternalToManyAccess.setRelInfo<MatchEntity>(object.tags,
              store, obx_int.RelInfo<MatchEntity>.toMany(9, object.id));
          return object;
        }),
    PacingEntity: obx_int.EntityDefinition<PacingEntity>(
        model: _entities[2],
        toOneRelations: (PacingEntity object) => [],
        toManyRelations: (PacingEntity object) => {
              obx_int.RelInfo<PacingEntity>.toMany(7, object.id):
                  object.improvisations,
              obx_int.RelInfo<PacingEntity>.toMany(10, object.id): object.tags
            },
        getId: (PacingEntity object) => object.id,
        setId: (PacingEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PacingEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final integrationIdOffset = object.integrationId == null
              ? null
              : fbb.writeString(object.integrationId!);
          final integrationEntityIdOffset = object.integrationEntityId == null
              ? null
              : fbb.writeString(object.integrationEntityId!);
          final integrationAdditionalDataOffset =
              object.integrationAdditionalData == null
                  ? null
                  : fbb.writeString(object.integrationAdditionalData!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.createdDate?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.modifiedDate?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.defaultNumberOfTeams);
          fbb.addOffset(6, integrationIdOffset);
          fbb.addOffset(7, integrationEntityIdOffset);
          fbb.addOffset(8, integrationAdditionalDataOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final modifiedDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final defaultNumberOfTeamsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final createdDateParam = createdDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdDateValue);
          final modifiedDateParam = modifiedDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(modifiedDateValue);
          final integrationIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final integrationEntityIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final integrationAdditionalDataParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20);
          final object = PacingEntity(
              id: idParam,
              name: nameParam,
              defaultNumberOfTeams: defaultNumberOfTeamsParam,
              createdDate: createdDateParam,
              modifiedDate: modifiedDateParam,
              integrationId: integrationIdParam,
              integrationEntityId: integrationEntityIdParam,
              integrationAdditionalData: integrationAdditionalDataParam);
          obx_int.InternalToManyAccess.setRelInfo<PacingEntity>(
              object.improvisations,
              store,
              obx_int.RelInfo<PacingEntity>.toMany(7, object.id));
          obx_int.InternalToManyAccess.setRelInfo<PacingEntity>(object.tags,
              store, obx_int.RelInfo<PacingEntity>.toMany(10, object.id));
          return object;
        }),
    PenaltyEntity: obx_int.EntityDefinition<PenaltyEntity>(
        model: _entities[3],
        toOneRelations: (PenaltyEntity object) => [],
        toManyRelations: (PenaltyEntity object) => {},
        getId: (PenaltyEntity object) => object.id,
        setId: (PenaltyEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PenaltyEntity object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.major);
          fbb.addOffset(2, typeOffset);
          fbb.addInt64(3, object.performerId);
          fbb.addInt64(4, object.teamId);
          fbb.addInt64(5, object.improvisationId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final majorParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final teamIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final improvisationIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final performerIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = PenaltyEntity(
              id: idParam,
              major: majorParam,
              type: typeParam,
              teamId: teamIdParam,
              improvisationId: improvisationIdParam,
              performerId: performerIdParam);

          return object;
        }),
    PerformerEntity: obx_int.EntityDefinition<PerformerEntity>(
        model: _entities[4],
        toOneRelations: (PerformerEntity object) => [],
        toManyRelations: (PerformerEntity object) => {},
        getId: (PerformerEntity object) => object.id,
        setId: (PerformerEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PerformerEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final integrationEntityIdOffset = object.integrationEntityId == null
              ? null
              : fbb.writeString(object.integrationEntityId!);
          final integrationAdditionalDataOffset =
              object.integrationAdditionalData == null
                  ? null
                  : fbb.writeString(object.integrationAdditionalData!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, integrationEntityIdOffset);
          fbb.addOffset(3, integrationAdditionalDataOffset);
          fbb.addInt64(4, object.order);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final orderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final integrationEntityIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final integrationAdditionalDataParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final object = PerformerEntity(
              id: idParam,
              name: nameParam,
              order: orderParam,
              integrationEntityId: integrationEntityIdParam,
              integrationAdditionalData: integrationAdditionalDataParam);

          return object;
        }),
    PointEntity: obx_int.EntityDefinition<PointEntity>(
        model: _entities[5],
        toOneRelations: (PointEntity object) => [],
        toManyRelations: (PointEntity object) => {},
        getId: (PointEntity object) => object.id,
        setId: (PointEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PointEntity object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.teamId);
          fbb.addInt64(2, object.improvisationId);
          fbb.addInt64(3, object.value);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final teamIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final improvisationIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final valueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = PointEntity(
              id: idParam,
              teamId: teamIdParam,
              improvisationId: improvisationIdParam,
              value: valueParam);

          return object;
        }),
    StarEntity: obx_int.EntityDefinition<StarEntity>(
        model: _entities[6],
        toOneRelations: (StarEntity object) => [],
        toManyRelations: (StarEntity object) => {},
        getId: (StarEntity object) => object.id,
        setId: (StarEntity object, int id) {
          object.id = id;
        },
        objectToFB: (StarEntity object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.performerId);
          fbb.addInt64(2, object.teamId);
          fbb.addInt64(3, object.order);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final orderParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final performerIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final teamIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = StarEntity(
              id: idParam,
              order: orderParam,
              performerId: performerIdParam,
              teamId: teamIdParam);

          return object;
        }),
    TeamEntity: obx_int.EntityDefinition<TeamEntity>(
        model: _entities[7],
        toOneRelations: (TeamEntity object) => [],
        toManyRelations: (TeamEntity object) => {
              obx_int.RelInfo<TeamEntity>.toMany(8, object.id):
                  object.performers,
              obx_int.RelInfo<TeamEntity>.toMany(11, object.id): object.tags
            },
        getId: (TeamEntity object) => object.id,
        setId: (TeamEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TeamEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final integrationEntityIdOffset = object.integrationEntityId == null
              ? null
              : fbb.writeString(object.integrationEntityId!);
          final integrationAdditionalDataOffset =
              object.integrationAdditionalData == null
                  ? null
                  : fbb.writeString(object.integrationAdditionalData!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.createdDate?.millisecondsSinceEpoch);
          fbb.addInt64(2, object.modifiedDate?.millisecondsSinceEpoch);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.color);
          fbb.addOffset(6, integrationEntityIdOffset);
          fbb.addOffset(7, integrationAdditionalDataOffset);
          fbb.addBool(8, object.hasMatch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final modifiedDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final colorParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final hasMatchParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final createdDateParam = createdDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdDateValue);
          final modifiedDateParam = modifiedDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(modifiedDateValue);
          final integrationEntityIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final integrationAdditionalDataParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final object = TeamEntity(
              id: idParam,
              name: nameParam,
              color: colorParam,
              hasMatch: hasMatchParam,
              createdDate: createdDateParam,
              modifiedDate: modifiedDateParam,
              integrationEntityId: integrationEntityIdParam,
              integrationAdditionalData: integrationAdditionalDataParam);
          obx_int.InternalToManyAccess.setRelInfo<TeamEntity>(object.performers,
              store, obx_int.RelInfo<TeamEntity>.toMany(8, object.id));
          obx_int.InternalToManyAccess.setRelInfo<TeamEntity>(object.tags,
              store, obx_int.RelInfo<TeamEntity>.toMany(11, object.id));
          return object;
        }),
    TagEntity: obx_int.EntityDefinition<TagEntity>(
        model: _entities[8],
        toOneRelations: (TagEntity object) => [],
        toManyRelations: (TagEntity object) => {},
        getId: (TagEntity object) => object.id,
        setId: (TagEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TagEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = TagEntity(id: idParam, name: nameParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ImprovisationEntity] entity fields to define ObjectBox queries.
class ImprovisationEntity_ {
  /// See [ImprovisationEntity.id].
  static final id =
      obx.QueryIntegerProperty<ImprovisationEntity>(_entities[0].properties[0]);

  /// See [ImprovisationEntity.type].
  static final type =
      obx.QueryIntegerProperty<ImprovisationEntity>(_entities[0].properties[1]);

  /// See [ImprovisationEntity.category].
  static final category =
      obx.QueryStringProperty<ImprovisationEntity>(_entities[0].properties[2]);

  /// See [ImprovisationEntity.theme].
  static final theme =
      obx.QueryStringProperty<ImprovisationEntity>(_entities[0].properties[3]);

  /// See [ImprovisationEntity.durationsInSeconds].
  static final durationsInSeconds =
      obx.QueryIntegerVectorProperty<ImprovisationEntity>(
          _entities[0].properties[4]);

  /// See [ImprovisationEntity.performers].
  static final performers =
      obx.QueryStringProperty<ImprovisationEntity>(_entities[0].properties[5]);

  /// See [ImprovisationEntity.notes].
  static final notes =
      obx.QueryStringProperty<ImprovisationEntity>(_entities[0].properties[6]);

  /// See [ImprovisationEntity.timeBufferInSeconds].
  static final timeBufferInSeconds =
      obx.QueryIntegerProperty<ImprovisationEntity>(_entities[0].properties[7]);

  /// See [ImprovisationEntity.huddleTimerInSeconds].
  static final huddleTimerInSeconds =
      obx.QueryIntegerProperty<ImprovisationEntity>(_entities[0].properties[8]);

  /// See [ImprovisationEntity.integrationEntityId].
  static final integrationEntityId =
      obx.QueryStringProperty<ImprovisationEntity>(_entities[0].properties[9]);

  /// See [ImprovisationEntity.integrationAdditionalData].
  static final integrationAdditionalData =
      obx.QueryStringProperty<ImprovisationEntity>(_entities[0].properties[10]);

  /// See [ImprovisationEntity.order].
  static final order = obx.QueryIntegerProperty<ImprovisationEntity>(
      _entities[0].properties[11]);
}

/// [MatchEntity] entity fields to define ObjectBox queries.
class MatchEntity_ {
  /// See [MatchEntity.id].
  static final id =
      obx.QueryIntegerProperty<MatchEntity>(_entities[1].properties[0]);

  /// See [MatchEntity.name].
  static final name =
      obx.QueryStringProperty<MatchEntity>(_entities[1].properties[1]);

  /// See [MatchEntity.createdDate].
  static final createdDate =
      obx.QueryDateProperty<MatchEntity>(_entities[1].properties[2]);

  /// See [MatchEntity.modifiedDate].
  static final modifiedDate =
      obx.QueryDateProperty<MatchEntity>(_entities[1].properties[3]);

  /// See [MatchEntity.enableStatistics].
  static final enableStatistics =
      obx.QueryBooleanProperty<MatchEntity>(_entities[1].properties[4]);

  /// See [MatchEntity.enablePenaltiesImpactPoints].
  static final enablePenaltiesImpactPoints =
      obx.QueryBooleanProperty<MatchEntity>(_entities[1].properties[5]);

  /// See [MatchEntity.penaltiesImpactType].
  static final penaltiesImpactType =
      obx.QueryIntegerProperty<MatchEntity>(_entities[1].properties[6]);

  /// See [MatchEntity.penaltiesRequiredToImpactPoints].
  static final penaltiesRequiredToImpactPoints =
      obx.QueryIntegerProperty<MatchEntity>(_entities[1].properties[7]);

  /// See [MatchEntity.enableMatchExpulsion].
  static final enableMatchExpulsion =
      obx.QueryBooleanProperty<MatchEntity>(_entities[1].properties[8]);

  /// See [MatchEntity.penaltiesRequiredToExpel].
  static final penaltiesRequiredToExpel =
      obx.QueryIntegerProperty<MatchEntity>(_entities[1].properties[9]);

  /// See [MatchEntity.integrationId].
  static final integrationId =
      obx.QueryStringProperty<MatchEntity>(_entities[1].properties[10]);

  /// See [MatchEntity.integrationEntityId].
  static final integrationEntityId =
      obx.QueryStringProperty<MatchEntity>(_entities[1].properties[11]);

  /// See [MatchEntity.integrationAdditionalData].
  static final integrationAdditionalData =
      obx.QueryStringProperty<MatchEntity>(_entities[1].properties[12]);

  /// See [MatchEntity.integrationRestrictMaximumPointPerImprovisation].
  static final integrationRestrictMaximumPointPerImprovisation =
      obx.QueryIntegerProperty<MatchEntity>(_entities[1].properties[13]);

  /// See [MatchEntity.integrationMinNumberOfImprovisations].
  static final integrationMinNumberOfImprovisations =
      obx.QueryIntegerProperty<MatchEntity>(_entities[1].properties[14]);

  /// See [MatchEntity.integrationMaxNumberOfImprovisations].
  static final integrationMaxNumberOfImprovisations =
      obx.QueryIntegerProperty<MatchEntity>(_entities[1].properties[15]);

  /// See [MatchEntity.integrationPenaltyTypes].
  static final integrationPenaltyTypes =
      obx.QueryStringVectorProperty<MatchEntity>(_entities[1].properties[16]);

  /// see [MatchEntity.teams]
  static final teams = obx.QueryRelationToMany<MatchEntity, TeamEntity>(
      _entities[1].relations[0]);

  /// see [MatchEntity.improvisations]
  static final improvisations =
      obx.QueryRelationToMany<MatchEntity, ImprovisationEntity>(
          _entities[1].relations[1]);

  /// see [MatchEntity.penalties]
  static final penalties = obx.QueryRelationToMany<MatchEntity, PenaltyEntity>(
      _entities[1].relations[2]);

  /// see [MatchEntity.points]
  static final points = obx.QueryRelationToMany<MatchEntity, PointEntity>(
      _entities[1].relations[3]);

  /// see [MatchEntity.stars]
  static final stars = obx.QueryRelationToMany<MatchEntity, StarEntity>(
      _entities[1].relations[4]);

  /// see [MatchEntity.tags]
  static final tags = obx.QueryRelationToMany<MatchEntity, TagEntity>(
      _entities[1].relations[5]);
}

/// [PacingEntity] entity fields to define ObjectBox queries.
class PacingEntity_ {
  /// See [PacingEntity.id].
  static final id =
      obx.QueryIntegerProperty<PacingEntity>(_entities[2].properties[0]);

  /// See [PacingEntity.name].
  static final name =
      obx.QueryStringProperty<PacingEntity>(_entities[2].properties[1]);

  /// See [PacingEntity.createdDate].
  static final createdDate =
      obx.QueryDateProperty<PacingEntity>(_entities[2].properties[2]);

  /// See [PacingEntity.modifiedDate].
  static final modifiedDate =
      obx.QueryDateProperty<PacingEntity>(_entities[2].properties[3]);

  /// See [PacingEntity.defaultNumberOfTeams].
  static final defaultNumberOfTeams =
      obx.QueryIntegerProperty<PacingEntity>(_entities[2].properties[4]);

  /// See [PacingEntity.integrationId].
  static final integrationId =
      obx.QueryStringProperty<PacingEntity>(_entities[2].properties[5]);

  /// See [PacingEntity.integrationEntityId].
  static final integrationEntityId =
      obx.QueryStringProperty<PacingEntity>(_entities[2].properties[6]);

  /// See [PacingEntity.integrationAdditionalData].
  static final integrationAdditionalData =
      obx.QueryStringProperty<PacingEntity>(_entities[2].properties[7]);

  /// see [PacingEntity.improvisations]
  static final improvisations =
      obx.QueryRelationToMany<PacingEntity, ImprovisationEntity>(
          _entities[2].relations[0]);

  /// see [PacingEntity.tags]
  static final tags = obx.QueryRelationToMany<PacingEntity, TagEntity>(
      _entities[2].relations[1]);
}

/// [PenaltyEntity] entity fields to define ObjectBox queries.
class PenaltyEntity_ {
  /// See [PenaltyEntity.id].
  static final id =
      obx.QueryIntegerProperty<PenaltyEntity>(_entities[3].properties[0]);

  /// See [PenaltyEntity.major].
  static final major =
      obx.QueryBooleanProperty<PenaltyEntity>(_entities[3].properties[1]);

  /// See [PenaltyEntity.type].
  static final type =
      obx.QueryStringProperty<PenaltyEntity>(_entities[3].properties[2]);

  /// See [PenaltyEntity.performerId].
  static final performerId =
      obx.QueryIntegerProperty<PenaltyEntity>(_entities[3].properties[3]);

  /// See [PenaltyEntity.teamId].
  static final teamId =
      obx.QueryIntegerProperty<PenaltyEntity>(_entities[3].properties[4]);

  /// See [PenaltyEntity.improvisationId].
  static final improvisationId =
      obx.QueryIntegerProperty<PenaltyEntity>(_entities[3].properties[5]);
}

/// [PerformerEntity] entity fields to define ObjectBox queries.
class PerformerEntity_ {
  /// See [PerformerEntity.id].
  static final id =
      obx.QueryIntegerProperty<PerformerEntity>(_entities[4].properties[0]);

  /// See [PerformerEntity.name].
  static final name =
      obx.QueryStringProperty<PerformerEntity>(_entities[4].properties[1]);

  /// See [PerformerEntity.integrationEntityId].
  static final integrationEntityId =
      obx.QueryStringProperty<PerformerEntity>(_entities[4].properties[2]);

  /// See [PerformerEntity.integrationAdditionalData].
  static final integrationAdditionalData =
      obx.QueryStringProperty<PerformerEntity>(_entities[4].properties[3]);

  /// See [PerformerEntity.order].
  static final order =
      obx.QueryIntegerProperty<PerformerEntity>(_entities[4].properties[4]);
}

/// [PointEntity] entity fields to define ObjectBox queries.
class PointEntity_ {
  /// See [PointEntity.id].
  static final id =
      obx.QueryIntegerProperty<PointEntity>(_entities[5].properties[0]);

  /// See [PointEntity.teamId].
  static final teamId =
      obx.QueryIntegerProperty<PointEntity>(_entities[5].properties[1]);

  /// See [PointEntity.improvisationId].
  static final improvisationId =
      obx.QueryIntegerProperty<PointEntity>(_entities[5].properties[2]);

  /// See [PointEntity.value].
  static final value =
      obx.QueryIntegerProperty<PointEntity>(_entities[5].properties[3]);
}

/// [StarEntity] entity fields to define ObjectBox queries.
class StarEntity_ {
  /// See [StarEntity.id].
  static final id =
      obx.QueryIntegerProperty<StarEntity>(_entities[6].properties[0]);

  /// See [StarEntity.performerId].
  static final performerId =
      obx.QueryIntegerProperty<StarEntity>(_entities[6].properties[1]);

  /// See [StarEntity.teamId].
  static final teamId =
      obx.QueryIntegerProperty<StarEntity>(_entities[6].properties[2]);

  /// See [StarEntity.order].
  static final order =
      obx.QueryIntegerProperty<StarEntity>(_entities[6].properties[3]);
}

/// [TeamEntity] entity fields to define ObjectBox queries.
class TeamEntity_ {
  /// See [TeamEntity.id].
  static final id =
      obx.QueryIntegerProperty<TeamEntity>(_entities[7].properties[0]);

  /// See [TeamEntity.createdDate].
  static final createdDate =
      obx.QueryDateProperty<TeamEntity>(_entities[7].properties[1]);

  /// See [TeamEntity.modifiedDate].
  static final modifiedDate =
      obx.QueryDateProperty<TeamEntity>(_entities[7].properties[2]);

  /// See [TeamEntity.name].
  static final name =
      obx.QueryStringProperty<TeamEntity>(_entities[7].properties[3]);

  /// See [TeamEntity.color].
  static final color =
      obx.QueryIntegerProperty<TeamEntity>(_entities[7].properties[4]);

  /// See [TeamEntity.integrationEntityId].
  static final integrationEntityId =
      obx.QueryStringProperty<TeamEntity>(_entities[7].properties[5]);

  /// See [TeamEntity.integrationAdditionalData].
  static final integrationAdditionalData =
      obx.QueryStringProperty<TeamEntity>(_entities[7].properties[6]);

  /// See [TeamEntity.hasMatch].
  static final hasMatch =
      obx.QueryBooleanProperty<TeamEntity>(_entities[7].properties[7]);

  /// see [TeamEntity.performers]
  static final performers =
      obx.QueryRelationToMany<TeamEntity, PerformerEntity>(
          _entities[7].relations[0]);

  /// see [TeamEntity.tags]
  static final tags =
      obx.QueryRelationToMany<TeamEntity, TagEntity>(_entities[7].relations[1]);
}

/// [TagEntity] entity fields to define ObjectBox queries.
class TagEntity_ {
  /// See [TagEntity.id].
  static final id =
      obx.QueryIntegerProperty<TagEntity>(_entities[8].properties[0]);

  /// See [TagEntity.name].
  static final name =
      obx.QueryStringProperty<TagEntity>(_entities[8].properties[1]);
}
